/**
 * @module
 *
 * Сгенерированные TypeScript типы для [API Т-Кассы](https://www.tbank.ru/kassa/dev/payments/index.html).
 */

/**
 * Сгенерированные из OpenAPI типы для `paths`
 */
export interface paths {
	"/v2/Init": {
		/**
		 * Инициализация платежа
		 * @description Метод инициирует платежную сессию
		 *
		 */
		post: operations["Init"];
	};
	"/v2/InitPayments": {
		/** Инициировать платеж в виджете */
		post: operations["InitPayments"];
	};
	"/v2/Check3dsVersion": {
		/**
		 * Проверка версии 3DS
		 * @description `Для Мерчантов с PCI DSS`
		 *      <br> Проверяет поддерживаемую версию 3DS протокола по карточным данным из входящих
		 *      параметров
		 *
		 *      При определении второй версии, возможно в ответе получение данных для прохождения
		 *      дополнительного метода `3DS Method`, который позволяет эмитенту собрать данные браузера
		 *      клиента — это может быть полезно при принятии решения в пользу **Frictionless Flow**
		 *      (аутентификация клиента без редиректа на страницу ACS) <br>
		 *
		 */
		post: operations["Check3dsVersion"];
	};
	"/v2/FinishAuthorize": {
		/**
		 * Подтверждение платежа
		 * @description `Для Мерчантов с PCI DSS`
		 *      <br> Метод подтверждает платеж передачей реквизитов, а также списывает средства
		 *      с карты клиента при одностадийной оплате и блокирует указанную сумму при
		 *      двухстадийной. Используется, если у площадки есть сертификация PCI DSS и
		 *      собственная платежная форма
		 *
		 */
		post: operations["FinishAuthorize"];
	};
	"/v2/Confirm": {
		/**
		 * Подтверждение платежа
		 * @description Метод для списания заблокированных денежных средств. Используется при двухстадийном проведении платежа. Применим только к платежам в статусе **AUTHORIZED**. Статус транзакции перед разблокировкой
		 *     выставляется в **CONFIRMING**. Сумма списания может быть меньше или равна сумме авторизации.
		 *     > Подробнее про двухстадийный платеж можно прочитать в разделе [Сценарии платежа](https://www.tbank.ru/kassa/dev/payments/#tag/Scenarii-oplaty-po-karte/Scenarii-platezha) — "Двухстадийный платеж"
		 *
		 */
		post: operations["Confirm"];
	};
	"/v2/Cancel": {
		/**
		 * Отмена платежа
		 * @description Отменяет платежную сессию. В зависимости от статуса платежа переводит его в следующие состояния:
		 *     * NEW — CANCELED
		 *     * AUTHORIZED — PARTIAL_REVERSED — если отмена не на полную сумму;
		 *     * AUTHORIZED — REVERSED — если отмена на полную сумму;
		 *     * CONFIRMED — PARTIAL_REFUNDED — если отмена не на полную сумму;
		 *     * CONFIRMED — REFUNDED — если отмена на полную сумму.
		 *
		 *     Для платежей «в Рассрочку» отмена доступна только из статуса AUTHORIZED <br>
		 *     Для платежей «Долями» если операция в статусе CONFIRMED или PARTIAL_REFUNDED будет осуществлен частичный либо полный возврат <br>
		 *     Если платеж находился в статусе **AUTHORIZED** производится отмена холдирования средств на карте
		 *     клиента. При переходе из статуса **CONFIRMED** — возврат денежных средств на карту клиента
		 *
		 */
		post: operations["Cancel"];
	};
	"/v2/Charge": {
		/**
		 * Автоплатеж
		 * @description # Схема проведения рекуррентного платежа
		 *
		 *     ## Описание
		 *
		 *     Осуществляет рекуррентный (повторный) платеж — безакцептное списание денежных средств со счета банковской карты клиента.
		 *     Для возможности его использования клиент должен совершить хотя бы один платеж в пользу Мерчанта, который должен быть указан как рекуррентный (см. параметр Recurrent методе **Init**), фактически являющийся первичным. По завершении оплаты в нотификации на AUTHORIZED или CONFIRMED будет передан параметр `RebillId`.<br>
		 *     В дальнейшем для совершения рекуррентного платежа Мерчант должен вызвать метод **Init**, указать нужную сумму для списания в параметре `Amount`, а затем без переадресации на PaymentURL вызвать метод **Charge** для оплаты по тем же самым реквизитам и передать параметр `RebillId`, полученный при совершении первичного платежа.<br>
		 *     Метод **Charge** работает по одностадийной и двухстадийной схеме оплаты. Чтобы перейти на двухстадийную схему нужно переключить терминал в [Личном кабинете](https://business.tbank.ru/oplata/main), а также написать обращение на <acq_help@tbank.ru> с просьбой переключить схему рекуррентов.
		 *
		 *     >По умолчанию метод Charge отключен. Для его включения на DEMO-терминале нужно написать обращение на <acq_help@tbank.ru>, а на боевом терминале — обратиться к своему персональному менеджеру
		 *
		 *     При проведении рекуррентного платежа учитывать взаимосвязь атрибута RebillId в методе /Charge с:
		 *       * Значением атрибута OperationInitiatorType в методе /Init;
		 *       * Значением атрибута Reccurent в методе /Init;
		 *       * Типом терминала, используемом для проведения операций (ECOM/AFT).
		 *
		 *     Наглядно допустимые сценарии взаимосвязи описаны в таблице:
		 *     |CIT/MIT|Тип операции|OperationInitiator в /Init|RebillId в /Charge|Recurrent в /Init|AFT терминал|ECOM терминал|
		 *     |---|---|---|---|---|---|---|
		 *     |CIT|Credential-Not-Captured|0|null|N|Разрешено|Разрешено|
		 *     |CIT|Credential-Captured|1|null|Y|Разрешено|Разрешено|
		 *     |CIT|Credential-on-File|2|not null|N|Запрещено|Разрешено|
		 *     |MIT|Credential-on-File, Recurring|R|not null|N|Запрещено|Разрешено|
		 *     |MIT|Credential-on-File, Installment|I|not null|N|Разрешено|Запрещено|
		 *
		 *     В случае передачи значений атрибутов не соответствующих таблице — MAPI вернет ошибку 1126
		 *     (Несопоставимые значения rebillId или Recurrent с переданным значением OperationInitiatorType)
		 *
		 *     ## Одностадийная оплата
		 *
		 *     1. Совершить родительский платеж путем вызова **Init** с указанием дополнительных параметров `Recurrent=Y` и `CustomerKey`.
		 *     2. Переадресовать клиента на `PaymentUrl` (только <span style="color:#900C3F">для Мерчантов без PCI DSS</span>).
		 *     3. После оплаты заказа клиентом в нотификации на статус **AUTHORIZED** или **CONFIRMED** будет передан параметр `RebillId`, который необходимо сохранить.
		 *     4. Спустя некоторое время для совершения рекуррентного платежа необходимо вызвать метод **Init** со стандартным набором параметров (параметры `Recurrent` и `CustomerKey` здесь не нужны).
		 *     5. Получить в ответ на **Init** параметр `PaymentId`.
		 *     6. Вызвать метод **Charge** с параметром `RebillId`, полученным в п.3, и параметром `PaymentId`, полученным в п.5. При успешном сценарии операция перейдет в статус CONFIRMED.
		 *
		 *
		 *     ## Двухстадийная оплата
		 *
		 *     1. Совершить родительский платеж путем вызова **Init** с указанием дополнительных параметров `Recurrent=Y` и `CustomerKey`.
		 *     2. Переадресовать клиента на `PaymentUrl` (только <span style="color:#900C3F">для Мерчантов без PCI DSS</span>).
		 *     3. После оплаты заказа клиентом в нотификации на статус **AUTHORIZED** или **CONFIRMED** будет передан параметр RebillId, который необходимо сохранить.
		 *     4. Спустя некоторое время для совершения рекуррентного платежа необходимо вызвать метод **Init** со стандартным набором параметров (параметр `Recurrent` и `CustomerKey` здесь не нужны).
		 *     5. Получить в ответ на **Init** параметр `PaymentId`.
		 *     6. Вызвать метод **Charge** с параметром `RebillId`, полученным в п.3, и параметром `PaymentId`, полученным в п.5. При успешном сценарии операция перейдет в статус **AUTHORIZED**. Денежные средства будут заблокированы на карте клиента.
		 *     7. Вызвать метод **Confirm** для подтверждения платежа.
		 *
		 */
		post: operations["ChargePCI"];
	};
	"/v2/GetState": {
		/**
		 * Получение статуса платежа
		 * @description Метод возвращает статус платежа
		 *
		 */
		post: operations["GetState"];
	};
	"/v2/AddCustomer": {
		/**
		 * Регистрация клиента
		 * @description Регистрирует клиента в связке с терминалом
		 *
		 *     > Возможна автоматическая привязка клиента и карты, по которой был совершен платеж, при
		 *     передаче параметра `CustomerKey` в методе **Init**. Это можно использовать для сохранения и
		 *     последующего отображения клиенту замаскированного номера карты, по которой будет совершен
		 *     рекуррентный платеж
		 *
		 */
		post: operations["AddCustomer"];
	};
	"/v2/GetCustomer": {
		/**
		 * Получение данных клиента
		 * @description Возвращает данные клиента, сохраненные в связке с терминалом
		 *
		 */
		post: operations["GetCustomer"];
	};
	"/v2/RemoveCustomer": {
		/**
		 * Удаление данных клиента
		 * @description Удаляет сохраненные данные клиента
		 *
		 */
		post: operations["RemoveCustomer"];
	};
	"/v2/AddCard": {
		/**
		 * Инициализация привязки карты к клиенту
		 * @description `Для Мерчантов с PCI DSS`
		 *      <br> Метод инициирует привязку карты к клиенту.
		 *      В случае успешной привязки переадресует клиента на `Success Add Card URL`,
		 *      в противном случае на `Fail Add Card URL`.
		 *      Можно использовать форму Т‑Кассы, возможно заменить на кастомную форму.
		 *
		 */
		post: operations["AddCard"];
	};
	"/v2/AttachCard": {
		/**
		 * Привязка карты
		 * @description `Для Мерчантов с PCI DSS`
		 *      <br> Завершает привязку карты к клиенту.
		 *      В случае успешной привязки переадресует клиента на **Success Add Card URL**
		 *      в противном случае на **Fail Add Card URL**.
		 *      Для прохождения 3DS второй версии перед вызовом метода должен быть вызван **\/v2/check3dsVersion**
		 *      и выполнен **3DS Method**, который является обязательным при прохождении **3DS** по протоколу версии
		 *      2.0.
		 *
		 */
		post: operations["AttachCard"];
	};
	"/v2/GetAddCardState": {
		/**
		 * Статус привязки карты
		 * @description `Для мерчантов с PCI DSS`
		 *      <br> Метод возвращает статус привязки карты
		 *
		 */
		post: operations["GetAddCardState"];
	};
	"/v2/GetCardList": {
		/**
		 * Список карт клиента
		 * @description Возвращает список всех привязанных карт клиента, включая удаленные
		 *
		 */
		post: operations["GetCardList"];
	};
	"/v2/RemoveCard": {
		/**
		 * Удаление привязанной карты клиента
		 * @description Метод удаляет привязанную карту клиента
		 *
		 */
		post: operations["RemoveCard"];
	};
	"/v2/GetQr": {
		/**
		 * Формирование QR
		 * @description Метод регистрирует QR и возвращает информацию о нем.
		 *     Должен быть вызван после вызова метода **Init**
		 *
		 */
		post: operations["GetQr"];
	};
	"/v2/SubmitRandomAmount": {
		/**
		 * SubmitRandomAmount
		 * @deprecated
		 * @description Метод предназначен для подтверждения карты путем блокировки случайной суммы
		 */
		post: operations["SubmitRandomAmount"];
	};
	"/v2/Submit3DSAuthorization": {
		/**
		 * Подтверждение прохождения 3DS v1.0
		 * @description `Для Мерчантов с PCI DSS`
		 *      <br> Осуществляет проверку результатов прохождения 3-D Secure и при успешном результате
		 *      прохождения 3-D Secure подтверждает инициированный платеж.
		 *      При использовании одностадийной оплаты осуществляет списание денежных средств с карты
		 *      клиента. <br>
		 *      При двухстадийной оплате осуществляет блокировку указанной суммы на карте клиента<br>
		 *
		 *      *Формат запроса*: `x-www-form-urlencoded` <br>
		 *
		 *      После получения на `TermUrl` мерчанта ответа ACS с результатами прохождения 3-D Secure необходимо
		 *      сформировать запрос к методу **Submit3DSAuthorization**
		 *
		 */
		post: operations["Submit3DSAuthorization"];
	};
	"/v2/Submit3DSAuthorizationV2": {
		/**
		 * Подтверждение прохождения 3DS v2.1
		 * @description `Для Мерчантов с PCI DSS`
		 *      <br> Осуществляет проверку результатов прохождения 3-D Secure v2 и при успешном результате
		 *      прохождения 3-D Secure v2 подтверждает инициированный платеж.
		 *      При использовании одностадийной оплаты осуществляет списание денежных средств с карты
		 *      клиента.
		 *      При двухстадийной оплате осуществляет блокировку указанной суммы на карте клиента.
		 *
		 *      *Формат запроса*: `x-www-form-urlencoded` <br>
		 *
		 *      После получения на `cresCallbackUrl` Мерчанта ответа ACS с результатами прохождения 3-D Secure необходимо
		 *      сформировать запрос к методу **Submit3DSAuthorizationV2**
		 *
		 */
		post: operations["Submit3DSAuthorizationV2"];
	};
	"/v2/TinkoffPay/terminals/{TerminalKey}/status": {
		/**
		 * Статус
		 * @description Метод определения возможности проведения платежа T‑Pay на терминале и устройстве
		 *
		 */
		get: operations["Status"];
	};
	"/v2/TinkoffPay/transactions/{paymentId}/versions/{version}/link": {
		/**
		 * Получение ссылки
		 * @description Метод получения Link для безусловного редиректа на мобильных устройствах
		 *
		 */
		get: operations["Link"];
	};
	"/v2/TinkoffPay/{paymentId}/QR": {
		/**
		 * Получение QR
		 * @description Метод получения QR для десктопов
		 *
		 */
		get: operations["QR"];
	};
	"/v2/SberPay/{paymentId}/QR": {
		/**
		 * Получение QR
		 * @description Метод получения QR для десктопов
		 *
		 */
		get: operations["SberPayQR"];
	};
	"/v2/SberPay/transactions/{paymentId}/link": {
		/**
		 * Получение ссылки
		 * @description Получение ссылки
		 *
		 */
		get: operations["SberPaylink"];
	};
	"/v2/TinkoffPayEvent": {
		/**
		 * Передача уведомления о событии
		 * @description Передача уведомления о событии платежного виджета T‑Pay + T‑ID
		 */
		post: operations["T-PayEvent"];
	};
	"/v2/QrMembersList": {
		/**
		 * Список банков-пользователей QR
		 * @description Метод возвращает список участников куда может быть осуществлен возврат платежа, совершенного
		 *     по QR
		 *
		 */
		post: operations["QrMembersList"];
	};
	"/v2/AddAccountQr": {
		/**
		 * Привязка счёта к магазину
		 * @description Метод инициирует привязку счета клиента к магазину
		 *     и возвращает информацию о нем
		 *
		 */
		post: operations["AddAccountQr"];
	};
	"/v2/GetAddAccountQrState": {
		/**
		 * Получение статуса привязки счета к магазину
		 * @description Метод возвращает статус привязки счета клиента по магазину
		 *
		 */
		post: operations["GetAddAccountQrState"];
	};
	"/v2/GetAccountQrList": {
		/**
		 * Получение списка счетов, привязанных к магазину
		 * @description Метод возвращает список привязанных счетов клиента по магазину
		 */
		post: operations["GetAccountQrList"];
	};
	"/v2/ChargeQr": {
		/**
		 * Автоплатеж по QR
		 * @description Проведение платежа по привязанному счету по QR через СБП.
		 *     Для возможности его использования клиент должен совершить успешную привязку счета с
		 *     помощью метода **AddAccountQr**. После вызова метода будет отправлена нотификация на Notification
		 *     URL о привязке счета , в которой будет указан AccountToken.
		 *     Для совершения платежа по привязанному счету Мерчант должен вызвать метод **Init**, в котором поля
		 *     **Recurrent= Y** и **DATA= {“QR”:“true”}**, а затем вызвать метод **ChargeQr** для оплаты по тем же самым
		 *     реквизитам и передать параметр **AccountToken**, полученный после привязки счета по QR в
		 *     нотификации.
		 *
		 */
		post: operations["ChargeQr"];
	};
	"/v2/SbpPayTest": {
		/**
		 * Создание тестовой платежной сессии
		 * @description Тестовая платежная сессия с предопределенным статусом по СБП
		 */
		post: operations["SbpPayTest"];
	};
	"/v2/GetQrState": {
		/**
		 * Получение статуса возврата
		 * @description Возвращает статус возврата платежа по СБП
		 *
		 */
		post: operations["GetQrState"];
	};
	"/v2/CheckOrder": {
		/**
		 * Получение статуса заказа
		 * @description Метод возвращает статус заказа
		 *
		 */
		post: operations["CheckOrder"];
	};
	"/cashbox/SendClosingReceipt": {
		/**
		 * Закрывающий чек в кассу
		 * @description Метод позволяет отправить закрывающий чек в кассу.
		 *     Условия работы метода:
		 *     1. Закрывающий чек может быть отправлен если платежная сессия по первому чеку находится в
		 *       статусе **CONFIRMED**.
		 *     2. В платежной сессии был передан объект `Receipt`.
		 *     3. В объекте `Receipt` был передан хотя бы один объект `Receipt.Items.PaymentMethod` =
		 *       `full_prepayment` или `prepayment` или `advance`.
		 *
		 */
		post: operations["SendClosingReceipt"];
	};
	"/v2/GetDeepLink": {
		/**
		 * Получить DeepLink
		 * @description Получение deeplink с включенным подписанным JWT-токеном. Предназначен для запроса по API
		 */
		post: operations["GetDeepLink"];
	};
	"/v2/GetTerminalPayMethods": {
		/**
		 * Проверить доступность методов на SDK
		 * @description Метод определяет доступность методов оплаты на терминале для SDK и API. Запрос не шифруется токеном
		 */
		get: operations["GetTerminalPayMethods"];
	};
	"/v2/getConfirmOperation": {
		/**
		 * Получение справки по операции
		 * @description Справку по конкретной операции можно получить на: <br> 1. URL-сервиса, развернутого на своей стороне. <br> 2. Электронную почту. <br> Для формирования токена необходимо использовать только <b>PASSWORD</b> и <b>TERMINAL_KEY</b>
		 */
		post: operations["GetConfirmOperation"];
	};
}
/**
 * Сгенерированные из OpenAPI типы для `webhooks`
 */
export interface webhooks {
	Notification: {
		/**
		 * Нотификации
		 * @description Метод реализуется на стороне Мерчанта для получения уведомлений об изменении статуса платежа
		 *
		 *     > **Нотификации о привязке (NotificationAddCard)**
		 *     `Для Мерчантов с PCI DSS`
		 *     <br> Уведомления магазину о статусе выполнения метода привязки карты `AttachCard`.
		 *     После успешного выполнения метода `AttachCard` Т‑Касса отправляет POST-запрос с информацией о привязке карты. Нотификация отправляется на ресурс Мерчанта на адрес `Notification URL` синхронно и ожидает ответа в течение 10 секунд.
		 *     После получения ответа или неполучения его за заданное время сервис переадресует клиента на `Success AddCard URL` или `Fail AddCard URL` в зависимости от результата привязки карты.
		 *     В случае успешной обработки нотификации Мерчант должен вернуть ответ с телом сообщения: OK (без тегов и заглавными английскими буквами). <br>
		 *     Если тело сообщения отлично от **OK**, любая нотификация считается неуспешной, и сервис будет повторно отправлять нотификацию раз в час в течение 24 часов. Если нотификация за это время так и не доставлена, она складывается в дамп
		 *
		 *     > **Нотификация о фискализации (NotificationFiscalization)**
		 *     <br> Если используется подключенная онлайн касса, по результату фискализации будет
		 *     отправлена нотификация с фискальными данными
		 *
		 *     > **Нотификация о статусе привязки счета по QR (NotificationQr)**
		 *     <br> После привязки счета по QR, магазину отправляется статус привязки и токен.
		 *     Нотификация будет приходить по статусам **ACTIVE** и **INACTIVE**
		 *
		 */
		post: operations["Notification"];
	};
}
/**
 * Сгенерированные из OpenAPI типы для `components`
 */
export interface components {
	schemas: {
		Common: {
			additionalProperties?: string;
			/**
			 * @description Признак инициатора операции
			 *     * '0' — оплата без сохранения реквизитов карты для последующего использования. Cценарий "0 — CIT, Credential-Not-Captured"
			 *     * '1' — используется, если Мерчант сохраняет карту. Cценарий — "1 — Consumer-Initiated, Credential-Captured"
			 *     * '2' — операция по ранее сохранённой карте, инициирована клиентом. Cценарий — "2 — Consumer-Initiated, Credential-on-File"
			 *     * 'R' — повторяющаяся операция по сохранённой карте без графика. Является Merchant Initiated сценарием ("R = Merchant-Initiated, Credential-on-File, Recurring")
			 *     * 'I' — повторяющаяся операция по сохраненной карте в соответствии с графиком платежей для погашения кредита. Является Merchant Initiated сценарием ("I = Merchant-Initiated, Credential-on-File, Installment")
			 *
			 *     При передаче в объекте DATA атрибута OperationInitiatorType учитывать взаимосвязь его значений с:
			 *       * значением атрибута Reccurent в методе /Init;
			 *       * значением атрибута RebillId в методе /Charge;
			 *       * типом терминала, используемом для проведения операций (ECOM/AFT).
			 *
			 *       Подробную таблицу см. в разделе [Передача признака инициатора операции](#section/Peredacha-priznaka-iniciatora-operacii)
			 *
			 *       В случае передачи значений атрибутов не соответствующих таблице — MAPI вернет ошибку 1126
			 *       (Несопоставимые значения rebillId или Recurrent с переданным значением OperationInitiatorType)
			 *
			 * @enum {string}
			 */
			OperationInitiatorType?: "0" | "1" | "2" | "R" | "I";
		};
		"T-Pay": {
			/**
			 * @description Тип устройства
			 *     * SDK (вызов из мобильных приложений);
			 *     * Desktop (вызов из браузера с десктопа);
			 *     * MobileWeb (вызов из браузера с мобильных устройств).
			 *
			 * @example Desktop
			 * @enum {string}
			 */
			Device?: "SDK" | "Desktop" | "MobileWeb";
			/**
			 * @description ОС устройства
			 * @example iOS
			 */
			DeviceOs?: string;
			/**
			 * @description Признак открытия в WebView
			 * @example true
			 */
			DeviceWebView?: boolean;
			/**
			 * @description Браузер
			 * @example Safari
			 */
			DeviceBrowser?: string;
			/**
			 * @description Признак проведения операции через T‑Pay по API
			 * @example true
			 */
			TinkoffPayWeb?: boolean;
		};
		YandexPay: {
			/**
			 * @description Признак проведения операции через Yandex Pay
			 * @example true
			 */
			YandexPayWeb: boolean;
		};
		LongPay1: {
			/** @description Номера билетов (с контрольной цифрой) для всех пассажиров, летящих по одному маршруту. В качестве разделителя используйте ';'<br>Необязателен, если передан параметр ticketReservationNumber
			 *      */
			ticketNumber?: string;
			/** @description Номера билетов (с контрольной цифрой) для всех пассажиров, летящих по одному маршруту. В качестве разделителя используйте ';'<br>Необязателен, если передан параметр ticketNumber
			 *      */
			ticketReservationNumber?: string;
			/** @description Код системы продажи */
			ticketSystem?: string;
			/** @description Код агентства */
			ticketAgencyCode?: string;
			/** @description Название агентства */
			ticketAgencyName?: string;
			/** @description Ограничения билета:
			 *             * 0 — без ограничений,
			 *             * 1 — невозвратный.
			 *      */
			ticketRestricted?: string;
		};
		/** @description % — порядковый номер пассажира от 1 до 4
		 *      */
		LongPay2: {
			/** @description Фамилия латиницей */
			"ticketPassengerSurname%": string;
			/** @description Имя латиницей */
			"ticketPassengerFirstname%": string;
			/** @description Серия и номер паспорта */
			"passengerPassport%"?: string;
			/** @description Гражданство. По стандарту ISO 3166-1 alpha-3 */
			"passengerCountry%"?: string;
			/** @description Дата рождения. В формате YYYY-DD-MM */
			"ticketPassengerBirthDate%"?: string;
		};
		/** @description \# — порядковый номер пассажира от 1 до 4 */
		LongPay3: {
			/** @description Дата вылета. В формате YYYY-DD-MM */
			"triplegDate#": string;
			/** @description Время вылета. В формате hh24:mm:ss */
			"triplegTime#"?: string;
			/** @description Код перевозчика ИАТА */
			"triplegCarrier#": string;
			/** @description Номер рейса */
			"triplegFlightNumber#"?: string;
			/** @description Класс перелета */
			"triplegClass#"?: string;
			/** @description Код аэропорта вылета ИАТА */
			"triplegDestinationFrom#": string;
			/** @description Код аэропорта прилета ИАТА */
			"triplegDestinationTo#": string;
			/** @description Код страны вылета. По стандарту ISO 3166-1 numeric */
			"triplegCountryFrom#"?: string;
			/** @description Код страны прилета. По стандарту ISO 3166-1 numeric */
			"triplegCountryTo#"?: string;
			/** @description Остановка при пересадке:
			 *     * 0 — разрешена,
			 *     * X — запрещена.
			 *      */
			"triplegStopover#"?: string;
			/** @description Код тарифа */
			"triplegFareBasisCode#"?: string;
		};
		/** @description Расширенный набор параметров авиабилета передается при создании платежа (метод Init) в параметре DATA */
		LongPay: {
			"\u041F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u044B \u0431\u0438\u043B\u0435\u0442\u0430"?: components["schemas"]["LongPay1"];
			"\u041F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u044B \u043F\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u0430"?: components["schemas"]["LongPay2"];
			"\u041F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u044B \u043F\u0435\u0440\u0435\u043B\u0435\u0442\u0430"?: components["schemas"]["LongPay3"];
		};
		/** @description Данные агента. Обязателен, если используется агентская схема.
		 *      */
		AgentData: {
			/**
			 * @description `Тег ФФД: 1222`<br>
			 *     Признак агента. Возможные значения:
			 *     * bank_paying_agent — банковский платежный агент,
			 *     * bank_paying_subagent — банковский платежный субагент,
			 *     * paying_agent — платежный агент,
			 *     * paying_subagent — платежный субагент,
			 *     * attorney — поверенный,
			 *     * commission_agent — комиссионер,
			 *     * another — другой тип агента.
			 *
			 * @example paying_agent
			 */
			AgentSign?: string;
			/**
			 * @description `Тег ФФД: 1044`<br>
			 *     Наименование операции.
			 *     Атрибут обязателен, если AgentSign передан в значениях:
			 *     * bank_paying_agent,
			 *     * bank_paying_subagent.
			 *
			 * @example Позиция чека
			 */
			OperationName?: string;
			/**
			 * @description `Тег ФФД: 1073`<br>
			 *     Телефоны платежного агента, в формате +{Ц}.
			 *     Атрибут обязателен, если в AgentSign передан в значениях:
			 *     * bank_paying_agent,
			 *     * bank_paying_subagent,
			 *     * paying_agent,
			 *     * paying_subagent.
			 *
			 * @example [
			 *       "+790912312398"
			 *     ]
			 */
			Phones?: string[];
			/**
			 * @description `Тег ФФД: 1074`<br>
			 *     Телефоны оператора по приему платежей, в формате +{Ц}.
			 *     Атрибут обязателен, если в AgentSign передан в значениях:
			 *     * paying_agent,
			 *     * paying_subagent.
			 *
			 * @example [
			 *       "+79221210697",
			 *       "+79098561231"
			 *     ]
			 */
			ReceiverPhones?: unknown;
			/**
			 * @description `Тег ФФД: 1075`<br>
			 *     Телефоны оператора перевода, в формате +{Ц}.
			 *     Атрибут обязателен, если в AgentSign передан в значениях:
			 *     * bank_paying_agent,
			 *     * bank_paying_subagent.
			 *
			 * @example [
			 *       "+79221210697"
			 *     ]
			 */
			TransferPhones?: unknown;
			/**
			 * @description `Тег ФФД: 1026`<br>
			 *     Наименование оператора перевода.
			 *     Атрибут обязателен, если в AgentSign передан в значениях:
			 *     * bank_paying_agent,
			 *     * bank_paying_subagent.
			 *
			 * @example Tinkoff
			 */
			OperatorName?: string;
			/**
			 * @description `Тег ФФД: 1005`<br>
			 *     Адрес оператора перевода.
			 *     Атрибут обязателен, если в AgentSign передан в значениях:
			 *     * bank_paying_agent,
			 *     * bank_paying_subagent.
			 *
			 * @example г. Тольятти
			 */
			OperatorAddress?: string;
			/**
			 * @description `Тег ФФД: 1016`<br>
			 *     ИНН оператора перевода.
			 *     Атрибут обязателен, если в AgentSign передан в значениях:
			 *     * bank_paying_agent,
			 *     * bank_paying_subagent.
			 *
			 * @example 7710140679
			 */
			OperatorInn?: string;
		};
		/** @description Данные поставщика платежного агента.
		 *     Обязателен, если передается значение AgentSign в объекте AgentData
		 *      */
		SupplierInfo: {
			/**
			 * @description `Тег ФФД: 1171`<br>
			 *     Телефон поставщика, в формате +{Ц}.
			 *     Атрибут обязателен, если передается значение `AgentSign`
			 *     в объекте `AgentData`
			 *
			 * @example [
			 *       "+79221210697",
			 *       "+79098561231"
			 *     ]
			 */
			Phones?: string[];
			/**
			 * @description `Тег ФФД: 1225`<br>
			 *     Наименование поставщика.
			 *     Атрибут обязателен, если передается значение `AgentSign`
			 *     в объекте `AgentData`.
			 *     Внимание: в данные 239 символов включаются телефоны поставщика
			 *     + 4 символа на каждый телефон.
			 *     Например, если передано два телефона поставщика длиной 12 и 14 символов,
			 *     то максимальная длина наименования поставщика будет
			 *     239 – (12 + 4) – (14 + 4) = 205 символов
			 *
			 * @example ООО Вендор товара
			 */
			Name?: string;
			/**
			 * @description `Тег ФФД: 1226`<br>
			 *     ИНН поставщика, в формате ЦЦЦЦЦЦЦЦЦЦ.
			 *     Атрибут обязателен, если передается значение `AgentSign`
			 *     в объекте `AgentData`
			 *
			 * @example 7710140679
			 */
			Inn?: string;
		};
		Items_FFD_105: {
			/**
			 * @description `Тег ФФД: 1030`<br>
			 *     Наименование товара
			 *
			 * @example Наименование товара 1
			 */
			Name: string;
			/**
			 * @description `Тег ФФД: 1078`<br>
			 *     Цена в копейках
			 *
			 * @example 10000
			 */
			Price: number;
			/**
			 * @description `Тег ФФД: 1023`<br>
			 *     Количество или вес товара
			 *     * Максимальное количество символов — 8, где целая часть не более 5 знаков, а дробная часть не более 3 знаков для АТОЛ, не более 2 знаков для CloudPayments
			 *
			 * @example 1
			 */
			Quantity: number;
			/**
			 * @description `Тег ФФД: 1043`<br>
			 *     Стоимость товара в копейках.
			 *     Произведение Quantity и Price
			 *
			 * @example 10000
			 */
			Amount: number;
			/**
			 * @description `Тег ФФД: 1214`<br>
			 *     Признак способа расчета
			 *     Возможные значения:
			 *     * «full_prepayment» — предоплата 100%,
			 *     * «prepayment» — предоплата,
			 *     * «advance» — аванс,
			 *     * «full_payment» — полный расчет,
			 *     * «partial_payment» — частичный расчет и кредит,
			 *     * «credit» — передача в кредит,
			 *     * «credit_payment» — оплата кредита.
			 *     <br>Если значение не
			 *     передано, по умолчанию в онлайн-кассу
			 *     передается признак способа расчёта
			 *     "full_payment"
			 *
			 * @default full_payment
			 * @enum {string}
			 */
			PaymentMethod:
				| "full_prepayment"
				| "prepayment"
				| "advance"
				| "full_payment"
				| "partial_payment"
				| "credit"
				| "credit_payment";
			/**
			 * @description `Тег ФФД: 1212`<br>
			 *     Признак предмета расчета
			 *     Возможные значения:
			 *     * commodity — товар,
			 *     * excise — подакцизный товар,
			 *     * job — работа,
			 *     * service — услуга,
			 *     * gambling_bet — ставка азартной игры,
			 *     * gambling_prize — выигрыш азартной игры,
			 *     * lottery — лотерейный билет,
			 *     * lottery_prize — выигрыш лотереи,
			 *     * intellectual_activity — предоставление результатов интеллектуальной деятельности,
			 *     * payment — платеж,
			 *     * agent_commission — агентское вознаграждение,
			 *     * composite — составной предмет расчета,
			 *     * another — иной предмет расчета,
			 *     <br>Если значение не передано, по умолчанию в онлайн-кассу
			 *     отправляется признак предмета расчёта "commodity"
			 *
			 * @default commodity
			 * @enum {string}
			 */
			PaymentObject:
				| "commodity"
				| "excise"
				| "job"
				| "service"
				| "gambling_bet"
				| "gambling_prize"
				| "lottery"
				| "lottery_prize"
				| "intellectual_activity"
				| "payment"
				| "agent_commission"
				| "composite"
				| "another";
			/**
			 * @description `Тег ФФД: 1199`<br>
			 *     Ставка НДС
			 *     Перечисление со значениями:
			 *     * none — без НДС,
			 *     * vat0 — НДС по ставке 0%,
			 *     * vat10 — НДС по ставке 10%,
			 *     * vat20 — НДС по ставке 20%,
			 *     * vat110 — НДС чека по расчетной ставке 10/110,
			 *     * vat120 — НДС чека по расчетной ставке 20/120.
			 *
			 * @example vat10
			 * @enum {string}
			 */
			Tax: "none" | "vat0" | "vat10" | "vat20" | "vat110" | "vat120";
			/**
			 * @description `Тег ФФД: 1162`<br>
			 *     Штрих-код в требуемом формате. В зависимости от
			 *     типа кассы требования могут отличаться:
			 *     * АТОЛ Онлайн — шестнадцатеричное
			 *     представление с пробелами. Максимальная
			 *     длина – 32 байта (^[a-fA-F0-9]{2}$)|(^([afA-F0-9]{2}\\s){1,31}[a-fA-F0-9]{2}$).
			 *     Пример:
			 *     00 00 00 01 00 21 FA 41 00 23 05 41 00
			 *     00 00 00 00 00 00 00 00 00 00 00 00 00
			 *     00 00 12 00 AB 00
			 *     * CloudKassir — длина строки: четная, от 8 до
			 *     150 байт, т.е. от 16 до 300 ASCII символов
			 *     ['0' - '9' , 'A' - 'F' ] шестнадцатеричного
			 *     представления кода маркировки товара.
			 *     Пример:
			 *     303130323930303030630333435
			 *     * OrangeData — строка, содержащая base64
			 *     кодированный массив от 8 до 32 байт.
			 *     Пример:
			 *     igQVAAADMTIzNDU2Nzg5MDEyMwAAAAAAAQ==
			 *     <br>В случае передачи в запросе параметра Ean13 не
			 *     прошедшего валидацию, возвращается неуспешный
			 *     ответ с текстом ошибки в параметре message =
			 *     "Неверный параметр Ean13"
			 *
			 * @example 0123456789
			 */
			Ean13?: string;
			/**
			 * @description Код магазина. Для параметра ShopСode
			 *     необходимо использовать значение параметра
			 *     Submerchant_ID, полученного в ответ при
			 *     регистрации магазинов через xml. Если xml не
			 *     используется, передавать поле не нужно.
			 *
			 * @example 12345
			 */
			ShopCode?: string;
			/** @description Данные агента.
			 *     Используется при работе по агентской схеме
			 *      */
			AgentData?: components["schemas"]["AgentData"];
			/** @description Данные поставщика платежного агента
			 *     Обязателен, если передается значение AgentSign в объекте AgentData
			 *      */
			SupplierInfo?: components["schemas"]["SupplierInfo"];
		};
		/** @description Детали платежа.
		 *     Если объект не передан, будет автоматически указана итоговая сумма чека с видом оплаты "Безналичный".
		 *     Если передан объект receipt.Payments, то значение в Electronic должно быть равно итоговому значению
		 *     Amount в методе Init. При этом сумма введенных значений по всем видам оплат, включая Electronic,
		 *     должна быть равна сумме (Amount) всех товаров, переданных в объекте receipt.Items.
		 *      */
		Payments: {
			/**
			 * @description `Тег ФФД: 1031`<br>
			 *     Вид оплаты "Наличные"
			 *     Сумма к оплате в копейках
			 *
			 * @example 90000
			 */
			Cash?: number;
			/**
			 * @description `Тег ФФД: 1081`<br>
			 *     Вид оплаты "Безналичный"
			 *
			 * @example 50000
			 */
			Electronic: number;
			/**
			 * @description `Тег ФФД: 1215`<br>
			 *     Вид оплаты "Предварительная оплата (Аванс)"
			 *
			 * @example 0
			 */
			AdvancePayment?: number;
			/**
			 * @description `Тег ФФД: 1216`<br>
			 *     Вид оплаты "Постоплата (Кредит)"
			 *
			 * @example 0
			 */
			Credit?: number;
			/**
			 * @description `Тег ФФД: 1217`<br>
			 *     Вид оплаты "Иная форма оплаты"
			 *
			 * @example 0
			 */
			Provision?: number;
		};
		/** @description Объект с информацией о видах суммы платежа. Если объект не передан, то будет автоматически указана итоговая сумма чека с видом оплаты "Безналичная" */
		Receipt_FFD_105: {
			/** @description Массив позиций чека с информацией о товарах */
			Items: components["schemas"]["Items_FFD_105"][];
			/**
			 * @description Версия ФФД.
			 *     Возможные значения:
			 *     * "FfdVersion": "1.2",
			 *     * "FfdVersion": "1.05".
			 *     По умолчанию версия ФФД - 1.05
			 *
			 * @default 1.05
			 */
			FfdVersion: string;
			/**
			 * Format: email
			 * @description `Тег ФФД: 1008`<br>
			 *     Электронная почта клиента.
			 *     Атрибут должен быть заполнен, если не передано значение
			 *     в атрибуте “Phone”
			 *
			 * @example a@test.ru
			 */
			Email?: string;
			/**
			 * @description `Тег ФФД: 1008`<br>
			 *     Телефон клиента в формате +{Ц}.
			 *     Атрибут должен быть заполнен, если не передано значение
			 *     в атрибуте “Email”
			 *
			 * @example +79031234567
			 */
			Phone?: string;
			/**
			 * @description `Тег ФФД: 1055`<br>
			 *     Система налогообложения. Перечисление с
			 *     возможными значениями:
			 *     * "osn" — общая СН,
			 *     * "usn_income" — упрощенная СН (доходы),
			 *     * "usn_income_outcome" — упрощенная СН (доходы минус расходы),
			 *     * "envd" — единый налог на вмененный доход,
			 *     * "esn" — единый сельскохозяйственный налог,
			 *     * "patent" — патентная СН.
			 *
			 * @example osn
			 * @enum {string}
			 */
			Taxation:
				| "osn"
				| "usn_income"
				| "usn_income_outcome"
				| "envd"
				| "esn"
				| "patent";
			/** @description Объект c информацией о видах суммы платежа.
			 *     См. структура объекта `Payments`
			 *     1. Если объект не передан, будет автоматически указана итоговая
			 *     сумма чека с видом оплаты "Безналичный";
			 *     2. Если передан объект `receipt.Payments`, то значение в `Electronic`
			 *     должно быть равно итоговому значению `Amount` в методе **Init**.
			 *     При этом сумма введенных значений по всем видам оплат,
			 *     включая `Electronic`, должна быть равна сумме (**Amount**) всех товаров,
			 *     переданных в объекте `receipt.Items`
			 *      */
			Payments?: components["schemas"]["Payments"];
		};
		/** @description Информация по клиенту.
		 *      */
		ClientInfo: {
			/** @description `Тег ФФД: 1243`<br>
			 *     Дата рождения клиента в формате ДД.ММ.ГГГГ
			 *      */
			Birthdate?: string;
			/** @description `Тег ФФД: 1244`<br>
			 *     Числовой код страны, гражданином которой является
			 *     клиент. Код страны указывается в соответствии с
			 *     Общероссийским классификатором стран мира [ОКСМ](https://classifikators.ru/oksm)
			 *      */
			Citizenship?: string;
			/**
			 * @description `Тег ФФД: 1245`<br>
			 *     Числовой код вида документа, удостоверяющего
			 *     личность.
			 *     Может принимать только значения
			 *     |Код|Описание|
			 *     |---|---|
			 *     | 21 | Паспорт гражданина Российской Федерации|
			 *     | 22 | Паспорт гражданина Российской Федерации, дипломатический паспорт, служебный паспорт, удостоверяющие личность гражданина Российской Федерации за пределами Российской Федерации|
			 *     | 26 | Временное удостоверение личности гражданина Российской Федерации, выдаваемое на период оформления паспорта гражданина Российской Федерации|
			 *     | 27 | Свидетельство о рождении гражданина Российской Федерации (для граждан Российской Федерации в возрасте до 14 лет)|
			 *     | 28 | Иные документы, признаваемые документами, удостоверяющими личность гражданина Российской Федерации в соответствии с законодательством Российской Федерации|
			 *     | 31 | Паспорт иностранного гражданина|
			 *     | 32 | Иные документы, признаваемые документами, удостоверяющими личность иностранного гражданина в соответствии с законодательством Российской Федерации и международным договором Российской Федерации|
			 *     | 33 | Документ, выданный иностранным государством и признаваемый в соответствии с международным договором Российской Федерации в качестве документа, удостоверяющего личность лица безгражданства.|
			 *     | 34 | Вид на жительство (для лиц без гражданства)|
			 *     | 35 | Разрешение на временное проживание (для лиц без гражданства)|
			 *     | 36 | Свидетельство о рассмотрении ходатайства о признании лица без гражданства беженцем на территории Российской Федерации по существу|
			 *     | 37 | Удостоверение беженца|
			 *     | 38 | Иные документы, признаваемые документами, удостоверяющими личность лиц без гражданства в соответствии с законодательством Российской Федерации и международным договором Российской Федерации|
			 *     | 40 | Документ, удостоверяющий личность лица, не имеющего действительного документа, удостоверяющего личность, на период рассмотрения заявления о признании гражданином Российской Федерации или о приеме в гражданство Российской Федерации|
			 *
			 * @example 21
			 */
			"Document\u0421ode"?: string;
			/** @description `Тег ФФД: 1246`<br>
			 *     Реквизиты документа, удостоверяющего личность
			 *     (например: серия и номер паспорта)
			 *      */
			DocumentData?: string;
			/** @description `Тег ФФД: 1254`<br>
			 *     Адрес клиента, грузополучателя
			 *      */
			Address?: string;
		};
		/** @description Код маркировки в машиночитаемой форме,
		 *     представленный в виде одного из видов кодов,
		 *     формируемых в соответствии с требованиями,
		 *     предусмотренными правилами, для нанесения
		 *     на потребительскую упаковку, или на товары,
		 *     или на товарный ярлык
		 *     * Включается в чек в случае, если предметом расчета является товар, подлежащий обязательной маркировке средством идентификации (соответствующий код в поле paymentObject)
		 *      */
		MarkCode: {
			/**
			 * @description Тип штрих кода.
			 *     Возможные значения:
			 *     * UNKNOWN — код товара, формат которого не
			 *     идентифицирован, как один из реквизитов;
			 *     * EAN8 — код товара в формате EAN-8;
			 *     * EAN13 — код товара в формате EAN-13;
			 *     * ITF14 — код товара в формате ITF-14;
			 *     * GS10 — код товара в формате GS1,
			 *     нанесенный на товар, не подлежащий
			 *     маркировке;
			 *     * GS1M — код товара в формате GS1,
			 *     нанесенный на товар, подлежащий
			 *     маркировке;
			 *     * SHORT — код товара в формате короткого кода
			 *     маркировки, нанесенный на товар;
			 *     * FUR — контрольно-идентификационный знак
			 *     мехового изделия;
			 *     * EGAIS20 — код товара в формате ЕГАИС-2.0;
			 *     * EGAIS30 — код товара в формате ЕГАИС-3.0;
			 *     * RAWCODE — код маркировки, как он был прочитан сканером.
			 *
			 * @example EAN8
			 */
			MarkCodeType: string;
			/**
			 * @description Код маркировки
			 *
			 * @example 12345678
			 */
			Value: string;
		};
		/** @description Реквизит «дробное количество маркированного товара».
		 *     Передается только в случае, если расчет осуществляется
		 *     за маркированный товар (соответствующий код в поле
		 *     paymentObject) и значение в поле measurementUnit
		 *     равно «0» <br> MarkQuantity не является обязательным объектом, в том числе для товаров с маркировкой. Этот объект МОЖНО передавать, если товар с маркировкой. То есть даже при ФФД 1.2 этот объект не является обязательным.
		 *     Пример:
		 *     ```
		 *           {
		 *           "numenator": "1"
		 *           "denominator" "2"
		 *           }
		 *     ```
		 *      */
		MarkQuantity: {
			/**
			 * @description `Тег ФФД: 1293`<br>
			 *     Числитель дробной части предмета расчета.
			 *     Значение должно быть строго меньше
			 *     значения реквизита «знаменатель»
			 *
			 * @example 1
			 */
			Numerator?: number;
			/**
			 * @description `Тег ФФД: 1294`<br>
			 *     Знаменатель дробной части предмета расчета.
			 *     Значение равно количеству товара в партии (упаковке),
			 *     имеющей общий код маркировки товара
			 *
			 * @example 2
			 */
			Denominator?: number;
		};
		/** @description Отраслевой реквизит предмета расчета. Необходимо указывать только для товаров подлежащих обязательной маркировке средством
		 *     идентификации и включение данного реквизита предусмотрено НПА отраслевого регулирования для
		 *     соответствующей товарной группы
		 *      */
		SectoralItemProps: {
			/**
			 * @description `Тег ФФД: 1262`<br>
			 *     Идентификатор ФОИВ (федеральный орган
			 *     исполнительной власти)
			 *
			 * @example 001
			 */
			FederalId: string;
			/**
			 * Format: date
			 * @description `Тег ФФД: 1263`<br>
			 *     Дата нормативного акта ФОИВ
			 *
			 * @example 21.11.2020
			 */
			Date: string;
			/**
			 * @description `Тег ФФД: 1264`<br>
			 *     Номер нормативного акта ФОИВ
			 *
			 * @example 123/43
			 */
			Number: string;
			/**
			 * @description `Тег ФФД: 1265`<br>
			 *     Состав значений, определенных нормативным актом ФОИВ
			 *
			 * @example test value SectoralItemProps
			 */
			Value: string;
		};
		/** @description Массив, содержащий в себе информацию о товарах. <br>
		 *     Атрибуты, предусмотренные в протоколе для отправки чеков по маркируемым товарам, не являются
		 *     обязательными для товаров без маркировки. Если используется ФФД 1.2, но реализуемый товар — не
		 *     подлежит маркировке, то поля можно не отправлять или отправить со значением null.
		 *      */
		Items_FFD_12: {
			AgentData?: components["schemas"]["AgentData"];
			SupplierInfo?: components["schemas"]["SupplierInfo"];
			/**
			 * @description `Тег ФФД: 1030`<br>
			 *     Наименование товара
			 *
			 * @example Наименование товара 1
			 */
			Name: string;
			/**
			 * @description `Тег ФФД: 1079`<br>
			 *     Цена в копейках
			 *
			 * @example 10000
			 */
			Price: number;
			/**
			 * @description `Тег ФФД: 1023`<br>
			 *     Количество или вес товара
			 *     * Максимальное количество символов — 8, где целая часть не более 5 знаков, а дробная часть не более 3 знаков для Атол, не более 2 знаков для CloudPayments;
			 *     * Значение «1», если передан объект MarkCode.
			 *
			 * @example 1
			 */
			Quantity: number;
			/**
			 * @description `Тег ФФД: 1043`<br>
			 *     Стоимость товара в копейках.
			 *     Произведение Quantity и Price
			 *
			 * @example 10000
			 */
			Amount: number;
			/**
			 * @description `Тег ФФД: 1199`<br>
			 *     Ставка НДС.
			 *     Перечисление со значениями:
			 *     * none — без НДС,
			 *     * vat0 — НДС по ставке 0%;
			 *     * vat10 — НДС по ставке 10%;
			 *     * vat20 — НДС по ставке 20%;
			 *     * vat110 — НДС чека по расчетной ставке 10/110;
			 *     * vat120 — НДС чека по расчетной ставке 20/120.
			 *
			 * @example vat10
			 * @enum {string}
			 */
			Tax: "none" | "vat0" | "vat10" | "vat20" | "vat110" | "vat120";
			/**
			 * @description `Тег ФФД: 1214`<br>
			 *     Признак способа расчёта.
			 *     Возможные значения:
			 *      * «full_prepayment» — предоплата 100%,
			 *      * «prepayment» — предоплата,
			 *      * «advance» — аванс,
			 *      * «full_payment» — полный расчет,
			 *      * «partial_payment» — частичный расчет и кредит,
			 *      * «credit» — передача в кредит,
			 *      * «credit_payment» — оплата кредита. <br>
			 *     Если значение не
			 *     передано, по умолчанию в онлайн-кассу
			 *     передается признак способа расчёта
			 *     "full_payment"
			 *
			 * @example full_prepayment
			 * @enum {string}
			 */
			PaymentMethod:
				| "full_prepayment"
				| "prepayment"
				| "advance"
				| "full_payment"
				| "partial_payment"
				| "credit"
				| "credit_payment";
			/**
			 * @description `Тег ФФД: 1212`<br>
			 *     Значения реквизита "признак предмета расчета"
			 *     (тег 1212) таблица 101
			 *     Возможные значения:
			 *     * «commodity» — товар,
			 *     * «excise» — подакцизный товар
			 *     * «job» — работа
			 *     * «service» — услуга
			 *     * «gambling_bet» — ставка азартной игры
			 *     * «gambling_prize» — выигрыш азартной игры
			 *     * «lottery» — лотерейный билет
			 *     * «lottery_prize» — выигрыш лотереи
			 *     * «intellectual_activity» — предоставление
			 *       результатов интеллектуальной деятельности
			 *     * «payment» — платеж
			 *     * «agent_commission» — агентское
			 *       вознаграждение
			 *     * «contribution» — выплата
			 *     * «property_rights» — имущественное право
			 *     * «unrealization» — внереализационный доход
			 *     * «tax_reduction» — иные платежи и взносы
			 *     * «trade_fee» — торговый сбор
			 *     * «resort_tax» — курортный сбор
			 *     * «pledge» — залог
			 *     * «income_decrease» — расход
			 *     * «ie_pension_insurance_without_payments» — взносы на ОПС ИП
			 *     * «ie_pension_insurance_with_payments» — взносы на ОПС
			 *     * «ie_medical_insurance_without_payments» — взносы на ОМС ИП
			 *     * «ie_medical_insurance_with_payments» — взносы на ОМС
			 *     * «social_insurance» — взносы на ОСС
			 *     * «casino_chips» — платеж казино
			 *     * «agent_payment» — выдача ДС
			 *     * «excisable_goods_without_marking_code» — АТНМ,
			 *     * «excisable_goods_with_marking_code» — АТМ,
			 *     * «goods_without_marking_code» — ТНМ,
			 *     * «goods_with_marking_code» — ТМ,
			 *     * «another» — иной предмет расчета.
			 *
			 * @example goods_with_marking_code
			 * @enum {string}
			 */
			PaymentObject:
				| "commodity"
				| "excise"
				| "job"
				| "service"
				| "gambling_bet"
				| "gambling_prize"
				| "lottery"
				| "lottery_prize"
				| "intellectual_activity"
				| "payment"
				| "agent_commission"
				| "contribution"
				| "property_rights"
				| "unrealization"
				| "tax_reduction"
				| "trade_fee"
				| "resort_tax"
				| "pledge"
				| "income_decrease"
				| "ie_pension_insurance_without_payments"
				| "ie_pension_insurance_with_payments"
				| "ie_medical_insurance_without_payments"
				| "ie_medical_insurance_with_payments"
				| "social_insurance"
				| "casino_chips"
				| "agent_payment"
				| "excisable_goods_without_marking_code"
				| "excisable_goods_with_marking_code"
				| "goods_without_marking_code"
				| "goods_with_marking_code"
				| "another";
			/**
			 * @description `Тег ФФД: 1191`<br>
			 *     Дополнительный реквизит предмета расчета
			 *
			 * @example Данные пользователя ext.test.qa@tinkoff.ru
			 */
			UserData?: string;
			/**
			 * @description `Тег ФФД: 1229`<br>
			 *     Сумма акциза в рублях с учетом копеек,
			 *     включенная в стоимость предмета расчета
			 *     * целая часть не более 8 знаков;
			 *     * дробная часть не более 2 знаков;
			 *     * значение не может быть отрицательным.
			 *
			 * @example 12.2
			 */
			Excise?: string;
			/**
			 * @description `Тег ФФД: 1230`<br>
			 *     Цифровой код страны происхождения товара в
			 *     соответствии с Общероссийским
			 *     классификатором стран мира (3 цифры)
			 *
			 * @example 056
			 */
			CountryCode?: string;
			/**
			 * @description `Тег ФФД: 1231`<br>
			 *     Номер таможенной декларации
			 *
			 * @example 12345678901
			 */
			DeclarationNumber?: string;
			/**
			 * @description `Тег ФФД: 2108`<br>
			 *     Единицы измерения.
			 *     Передовать в соответствии с ОК 015-94 (МК 002-97)) <br>
			 *     Возможные варианты указаны в <a href="https://www.consultant.ru/document/cons_doc_LAW_362322/0060b1f1924347c03afbc57a8d4af63888f81c6c/">статье</a> (также возможна передача произвольных значений).<br> MeasurementUnit обязателен, в случае если ФФД онлайн-кассы 1.2
			 *
			 * @example шт
			 */
			MeasurementUnit: string;
			/** @description `Тег ФФД: 2102`<br>
			 *     Режим обработки кода маркировки.
			 *     Должен принимать значение равное «0».
			 *     Включается в чек в случае, если предметом расчета
			 *     является товар, подлежащий обязательной
			 *     маркировке средством идентификации
			 *     (соответствующий код в поле paymentObject).
			 *      */
			MarkProcessingMode?: string;
			/** @description `Тег ФФД: 1163`<br>
			 *     Код маркировки в машиночитаемой форме,
			 *     представленный в виде одного из видов кодов,
			 *     формируемых в соответствии с требованиями,
			 *     предусмотренными правилами, для нанесения
			 *     на потребительскую упаковку, или на товары,
			 *     или на товарный ярлык
			 *     * Включается в чек в случае, если предметом расчета является товар, подлежащий обязательной маркировке средством идентификации (соответствующий код в поле paymentObject)
			 *      */
			MarkCode?: components["schemas"]["MarkCode"];
			MarkQuantity?: components["schemas"]["MarkQuantity"];
			SectoralItemProps?: components["schemas"]["SectoralItemProps"];
		};
		/** @description Объект с информацией о видах суммы платежа. Если объект не передан, то будет автоматически указана итоговая сумма чека с видом оплаты "Безналичная" */
		Receipt_FFD_12: {
			/** @description Версия ФФД.
			 *     Возможные значения:
			 *     * "FfdVersion": "1.2",
			 *     * "FfdVersion": "1.05".
			 *      */
			FfdVersion: string;
			ClientInfo?: components["schemas"]["ClientInfo"];
			/**
			 * @description `Тег ФФД: 1055`<br>
			 *     Система налогообложения. Перечисление с
			 *     возможными значениями:
			 *     * "osn" — общая СН,
			 *     * "usn_income" — упрощенная СН (доходы),
			 *     * "usn_income_outcome" — упрощенная СН (доходы минус расходы),
			 *     * "envd" — единый налог на вмененный доход,
			 *     * "esn" — единый сельскохозяйственный налог,
			 *     * "patent" — патентная СН.
			 *
			 * @example osn
			 * @enum {string}
			 */
			Taxation:
				| "osn"
				| "usn_income"
				| "usn_income_outcome"
				| "envd"
				| "esn"
				| "patent";
			/**
			 * Format: email
			 * @description `Тег ФФД: 1008`<br>
			 *     Электронная почта клиента.
			 *     Атрибут должен быть заполнен, если не передано значение
			 *     в атрибуте `Phone`
			 *
			 * @example a@test.ru
			 */
			Email?: string;
			/**
			 * @description `Тег ФФД: 1008`<br>
			 *     Телефон клиента в формате +{Ц}.
			 *     Атрибут должен быть заполнен, если не передано значение
			 *     в атрибуте `Email`
			 *
			 * @example +79031234567
			 */
			Phone?: string;
			/**
			 * @description `Тег ФФД: 1227`<br>
			 *     Идентификатор/Имя клиента
			 *
			 * @example 78894325
			 */
			Customer?: string;
			/**
			 * @description `Тег ФФД: 1228`<br>
			 *     ИНН клиента
			 *
			 * @example 788621292
			 */
			CustomerInn?: string;
			/** @description Массив, содержащий в себе информацию о товарах */
			Items: components["schemas"]["Items_FFD_12"];
			/** @description Объект c информацией о видах суммы платежа.
			 *     См. структура объекта `Payments`
			 *     1. Если объект не передан, будет автоматически указана итоговая
			 *     сумма чека с видом оплаты "Безналичный";
			 *     2. Если передан объект `receipt.Payments`, то значение в `Electronic`
			 *     должно быть равно итоговому значению `Amount` в методе **Init**.
			 *     При этом сумма введенных значений по всем видам оплат,
			 *     включая `Electronic`, должна быть равна сумме (**Amount**) всех товаров,
			 *     переданных в объекте `receipt.Items`
			 *      */
			Payments?: components["schemas"]["Payments"];
		};
		/** @description JSON объект с данными Маркетплейса. Обязательный для маркетплейсов */
		Shops: {
			/**
			 * @description Код магазина
			 *
			 * @example 700456
			 */
			ShopCode: string;
			/**
			 * @description Cумма в копейках, которая относится к
			 *     указанному `ShopCode`
			 *
			 * @example 10000
			 */
			Amount: number;
			/**
			 * @description Наименование товара
			 *
			 * @example Товар
			 */
			Name?: string;
			/**
			 * @description Сумма комиссии в копейках, удерживаемая из
			 *     возмещения Партнера в пользу Маркетплейса.
			 *     Если не передано, используется комиссия,
			 *     указанная при регистрации
			 *
			 * @example 500
			 */
			Fee?: string;
		};
		Init_FULL: {
			/**
			 * @description Идентификатор терминала. <br>
			 *     Выдается Мерчанту Т‑Кассой при заведении терминала
			 *
			 * @example TinkoffBankTest
			 */
			TerminalKey: string;
			/**
			 * @description * Сумма в копейках. Например, сумма 3руб. 12коп. — это число 312;
			 *     * Параметр должен быть равен сумме всех параметров `Amount`, переданных в объекте `Items`;
			 *     * Минимальная сумма операции с помощью СБП составляет 10 руб.
			 *
			 * @example 140000
			 */
			Amount: number;
			/**
			 * @description Идентификатор заказа в системе Мерчанта <br> Возможно повторное использование идентификатора, если ранее по нему не было успешной авторизации
			 * @example 21050
			 */
			OrderId: string;
			/**
			 * @description Подпись запроса
			 * @example 7241ac8307f349afb7bb9dda760717721bbb45950b97c67289f23d8c69cc7b96
			 */
			Token: string;
			/**
			 * @description Описание заказа.
			 *     Значение параметра будет отображено на платежной форме
			 *     * Поле необходимо обязательно заполнять для осуществления привязки и одновременной оплаты по CБП. При оплате через СБП данная информация будет отображена в приложении мобильного банка клиента
			 *
			 * @example Подарочная карта на 1400.00 рублей
			 */
			Description?: string;
			/** @description Идентификатор клиента в системе Мерчанта
			 *     * Обязателен, если передан атрибут `Recurrent`;
			 *     * Если был передан в запросе, в нотификации будет указан `CustomerKey` и его `CardId`. См. метод [GetCardList](#tag/Metody-raboty-s-kartami/paths/~1GetCardList/post);
			 *     * Необходим для сохранения карт на платежной форме (платежи в один клик);
			 *     * Не является обязательным при рекуррентных платежах через СБП.
			 *      */
			CustomerKey?: string;
			/**
			 * @description Признак родительского рекуррентного платежа <br>
			 *     Для регистрации автоплатежа — обязателен. Если передается и установлен в Y, то регистрирует платеж как рекуррентный. В этом случае после оплаты в нотификации на AUTHORIZED будет передан параметр RebillId для использования в методе Charge. Для осуществления привязки и одновременной оплаты по CБП необходимо передавать 'Y'.
			 *
			 *     Значение зависимо от атрибутов:
			 *       * OperationInitiatorType в методе /init,
			 *       * Recurrent в методе /Init. <br>
			 *     Детальная информация представлена в описании [Рекуррентный платёж](#tag/Rekurrentnyj-platyozh) и [Инициализация платежа](#tag/Standartnyj-platyozh/paths/~1Init/post)
			 *
			 * @example Y
			 */
			Recurrent?: string;
			/**
			 * @description Определяет тип проведения платежа — двухстадийная или одностадийная оплата.
			 *     * "O" — одностадийная оплата,
			 *     * "T" — двухстадийная оплата. <br>
			 *     Если параметр передан — используется его значение
			 *     Если нет — значение в настройках терминала
			 *
			 * @enum {string}
			 */
			PayType?: "O" | "T";
			/**
			 * @description Язык платежной формы
			 *     * ru — русский,
			 *     * en — английский. <br>
			 *     Если не передан, форма откроется на русском языке
			 *
			 * @example ru
			 */
			Language?: string;
			/**
			 * Format: uri
			 * @description URL на веб-сайте Мерчанта, куда будет отправлен
			 *     POST запрос о статусе выполнения вызываемых методов
			 *     (настраивается в Личном кабинете):
			 *     * Если параметр передан — используется его значение
			 *     * Если нет — значение в настройках терминала
			 *
			 */
			NotificationURL?: string;
			/**
			 * Format: uri
			 * @description URL на веб-сайте Мерчанта, куда будет
			 *     переведен клиент в случае успешной оплаты
			 *     (настраивается в Личном кабинете):
			 *     * Если параметр передан — используется его значение
			 *     * Если нет — значение в настройках терминала
			 *
			 */
			SuccessURL?: string;
			/**
			 * Format: uri
			 * @description URL на веб-сайте Мерчанта, куда будет
			 *     переведен клиент в случае неуспешной
			 *     оплаты (настраивается в Личном кабинете):
			 *     * Если параметр передан — используется его значение
			 *     * Если нет — значение в настройках терминала
			 *
			 */
			FailURL?: string;
			/**
			 * Format: date-time
			 * @description Cрок жизни ссылки или динамического QR-кода
			 *     СБП (если выбран данный способ оплаты).
			 *     Если текущая дата превышает дату, переданную в
			 *     данном параметре, ссылка для оплаты или
			 *     возможность платежа по QR-коду становятся
			 *     недоступными и платёж выполнить нельзя.
			 *     * Максимальное значение: 90 дней от текущей даты;
			 *     * Минимальное значение: 1 минута от текущей даты;
			 *     * Формат даты: YYYY-MM-DDTHH24:MI:SS+GMT;
			 *     * Пример даты: 2016-08-31T12:28:00+03:00. <br>
			 *     Если не передан, принимает значение 24 часа для платежа
			 *     и 30 дней для счета
			 *
			 *     При выставлении счета через Личный кабинет: <br>
			 *     В случае, если параметр RedirectDueDate не был передан, проверяется настроечный параметр
			 *     платежного терминала REDIRECT_TIMEOUT, который может содержать значение срока жизни ссылки в
			 *     часах. Если его значение больше нуля, то оно будет установлено в качестве срока жизни ссылки или
			 *     динамического QR-кода. Иначе, устанавливается значение «по умолчанию» — 1440 мин.(1 сутки).
			 *
			 */
			RedirectDueDate?: unknown;
			/** @description JSON-объект, который позволяет передавать дополнительные параметры по операции и задавать определенные настройки в формате "ключ":"значение"
			 *
			 *     Максимальная длина для каждого передаваемого параметра:
			 *       * Ключ — 20 знаков,
			 *       * Значение — 100 знаков.
			 *
			 *     Максимальное количество пар "ключ":"значение" - 20
			 *
			 *     1. Если у терминала включена опция привязки клиента после
			 *     успешной оплаты и передается параметр `CustomerKey`, то в передаваемых
			 *     параметрах `DATA` могут присутствовать параметры метода **AddCustomer**.
			 *     Если они присутствуют, то автоматически привязываются к клиенту.
			 *     Например, если указать:
			 *
			 *     ```
			 *     "DATA":{"Phone":"+71234567890", "Email":"a@test.com"}
			 *     ```
			 *     к клиенту автоматически будут привязаны данные Email и телефон,
			 *     и они будут возвращаться при вызове метода **GetCustomer**
			 *
			 *         Для МСС 4814 обязательно передать значение в параметре `Phone`
			 *         Требования по заполнению:
			 *           * минимум 7 символов,
			 *           * максимум 20 символов,
			 *           * разрешены только цифры, исключение — первый символ может быть «+».
			 *
			 *         Для МСС 6051 и 6050 обязательно передать параметр `account` (номер электронного кошелька, не должен превышать 30 символов). Пример:
			 *
			 *         "DATA": {"account":"123456789"}
			 *
			 *     2. Если используется функционал сохранения карт на платежной форме,
			 *     то при помощи опционального параметра `DefaultCard` можно задать
			 *     какая карта будет выбираться по умолчанию.
			 *     Возможные варианты:
			 *     * Оставить платежную форму пустой. Пример:
			 *       ```
			 *       "DATA":{"DefaultCard":"none"}
			 *       ```
			 *     * Заполнить данными передаваемой карты. В этом случае передается `CardId`. Пример:
			 *       ```
			 *        "DATA":{"DefaultCard":"894952"}
			 *       ```
			 *     * Заполнить данными последней сохраненной карты. Применяется, если параметр `DefaultCard` не передан, передан с некорректным значением или в значении null.
			 *     По умолчанию возможность сохранение карт на платежной форме может быть отключена. Для активации обратитесь в службу технической поддержки.
			 *
			 *     3. При реализации подключения оплаты через YandexPay Web или T‑Pay Web,
			 *     необходимо обязательно передавать следующие параметры в объекте Data.
			 *     Пример:
			 *       ```
			 *       "DATA": {
			 *         "TinkoffPayWeb": "true",
			 *         "Device": "Desktop",
			 *         "DeviceOs": "iOS",
			 *         "DeviceWebView": "true",
			 *         "DeviceBrowser": "Safari"
			 *        }
			 *       ```
			 *     где следует передать параметры устройства, с которого будет осуществлен переход
			 *
			 *     Рекомендации для заполнения поля Device:
			 *       * "SDK" — при способе интеграции "Мобильный SDK";
			 *       * "Mobile"  — при оплате c мобильного устройства;
			 *       * "Desktop" — при оплате c десктопного устройства.
			 *
			 *     Рекомендации для заполнения поля DeviceOs:
			 *       * iOS,
			 *       * Android,
			 *       * macOS,
			 *       * Windows,
			 *       * Linux.
			 *
			 *     Рекомендации для заполнения поля DeviceBrowser:
			 *       * Chrome,
			 *       * Firefox,
			 *       * JivoMobile,
			 *       * Microsoft Edge,
			 *       * Miui,
			 *       * Opera,
			 *       * Safari,
			 *       * Samsung,
			 *       * WebKit,
			 *       * WeChat,
			 *       * Yandex.
			 *
			 *     4. Параметр `notificationEnableSource` позволяет отправлять нотификации только если Source (также
			 *     присутствует в параметрах сессии) платежа входит в перечень указанных в параметре. Возможные
			 *     варианты: T‑Pay, sbpqr, YandexPay. Пример:
			 *      ```
			 *      notificationEnableSource=TinkoffPay
			 *      ```
			 *     5. Для осуществления привязки и одновременной оплаты по CБП необходимо передавать параметр "QR" = "true".
			 *     6. При передаче в объекте DATA атрибута OperationInitiatorType учитывать взаимосвязь его значений с:
			 *        * Значением атрибута Reccurent в методе /Init;
			 *        * Значением атрибута RebillId в методе /Charge;
			 *        * Типом терминала, используемом для проведения операций (ECOM/AFT).
			 *
			 *       Подробную таблицу см. в разделе [Передача признака инициатора операции](#section/Peredacha-priznaka-iniciatora-operacii)
			 *
			 *       В случае передачи значений атрибутов не соответствующих таблице — MAPI вернет ошибку 1126
			 *       (Несопоставимые значения rebillId или Recurrent с переданным значением OperationInitiatorType)
			 *      */
			DATA?:
				| components["schemas"]["Common"]
				| components["schemas"]["T-Pay"]
				| components["schemas"]["YandexPay"]
				| components["schemas"]["LongPay"];
			/** @description JSON-объект с данными чека. Обязателен, если подключена онлайн-касса */
			Receipt?:
				| components["schemas"]["Receipt_FFD_105"]
				| components["schemas"]["Receipt_FFD_12"];
			/** @description JSON-объект с данными Маркетплейса. Обязательный для маркетплейсов */
			Shops?: components["schemas"]["Shops"][];
			/**
			 * @description Динамический дескриптор точки
			 * @example 678451
			 */
			Descriptor?: string;
		};
		/** @description SDK */
		Init_SDK: {
			/**
			 * @description Идентификатор терминала. <br>
			 *     Выдается Мерчанту Т‑Кассой при заведении терминала
			 *
			 * @example TinkoffBankTest
			 */
			TerminalKey: string;
			/**
			 * @description * Сумма в копейках. Например, сумма 3руб. 12коп. это число 312;
			 *     * Параметр должен быть равен сумме всех параметров `Amount`, переданных в объекте `Items`;
			 *     * Минимальная сумма операции с помощью СБП составляет 10 руб.
			 *
			 * @example 140000
			 */
			Amount: number;
			/**
			 * @description Идентификатор заказа в системе Мерчанта
			 * @example 21050
			 */
			OrderId: string;
			/**
			 * @description Подпись запроса
			 * @example 7241ac8307f349afb7bb9dda760717721bbb45950b97c67289f23d8c69cc7b96
			 */
			Token: string;
			/**
			 * @description Описание заказа. Поле необходимо обязательно заполнять для осуществления привязки и одновременной оплаты по CБП
			 * @example Подарочная карта на 1400.00 рублей
			 */
			Description?: string;
			/** @description Идентификатор клиента в системе Мерчанта
			 *     * Обязателен, если передан атрибут `Recurrent`;
			 *     * Если был передан в запросе, в нотификации будет указан `CustomerKey` и его `CardId`. См. метод [GetCardList](#tag/Metody-raboty-s-kartami/paths/~1GetCardList/post);
			 *     * Необходим для сохранения карт на платежной форме (платежи в один клик).
			 *      */
			CustomerKey?: string;
			/**
			 * @description Признак родительского рекуррентного платежа
			 *     * Для регистрации автоплатежа — обязателен. Если передается и установлен в Y, то регистрирует платеж как рекуррентный. В этом случае после оплаты в нотификации на AUTHORIZED будет передан параметр RebillId для использования в методе [Charge](#tag/Rekurrentnyj-platyozh/paths/~1Charge/post).
			 *     * Для осуществления привязки и одновременной оплаты по CБП необходимо передавать 'Y'
			 *
			 * @example Y
			 */
			Recurrent?: string;
			/**
			 * @description Определяет тип проведения платежа — двухстадийная или одностадийная оплата
			 *     * "O" — одностадийная оплата,
			 *     * "T" — двухстадийная оплата.
			 *
			 * @enum {string}
			 */
			PayType?: "O" | "T";
			/**
			 * @description Язык платежной формы
			 *     * ru — русский,
			 *     * en — английский.
			 *     Если не передан, форма откроется на русском языке
			 *
			 * @enum {string}
			 */
			Language?: "ru" | "en";
			/**
			 * Format: uri
			 * @description URL на веб-сайте Мерчанта, куда будет отправлен
			 *     POST запрос о статусе выполнения вызываемых методов
			 *     (настраивается в Личном кабинете):
			 *     * если параметр передан – используется его значение;
			 *     * если нет – значение в настройках терминала.
			 *
			 */
			NotificationURL?: string;
			/**
			 * Format: uri
			 * @description URL на веб-сайте Мерчанта, куда будет
			 *     переведен клиент в случае успешной оплаты (для установки обратитесь к персональному менеджеру)
			 *     * если параметр передан – используется также значение, установленное через менеджера (актуально для SDK)
			 *
			 */
			SuccessURL?: string;
			/**
			 * Format: uri
			 * @description URL на веб-сайте Мерчанта, куда будет
			 *     переведен клиент в случае неуспешной оплаты (для установки обратитесь к персональному менеджеру)
			 *     * если параметр передан – используется также значение, установленное через менеджера (актуально для SDK)
			 *
			 */
			FailURL?: string;
			/**
			 * Format: date-time
			 * @description Cрок жизни ссылки или динамического QR-кода
			 *     СБП (если выбран данный способ оплаты).
			 *     Если текущая дата превышает дату, переданную в
			 *     данном параметре, ссылка для оплаты или
			 *     возможность платежа по QR-коду становятся
			 *     недоступными и платёж выполнить нельзя.
			 *     * Максимальное значение: 90 дней от текущей даты;
			 *     * Минимальное значение: 1 минута от текущей даты;
			 *     * Формат даты: YYYY-MM-DDTHH24:MI:SS+GMT;
			 *     * Пример даты: 2016-08-31T12:28:00+03:00. <br>
			 *     Если не передан, принимает значение 24 часа для платежа
			 *     и 30 дней для счета
			 *
			 */
			RedirectDueDate?: string;
			/** @description JSON-объект, который позволяет передавать дополнительные параметры по операции и задавать определенные настройки в формате "ключ":"значение".
			 *
			 *     Максимальная длина для каждого передаваемого параметра:
			 *       * Ключ — 20 знаков;
			 *       * Значение — 100 знаков.
			 *
			 *     Максимальное количество пар "ключ":"значение" — 20
			 *
			 *     1. Если у терминала включена опция привязки клиента после
			 *     успешной оплаты и передается параметр `CustomerKey`, то в передаваемых
			 *     параметрах `DATA` могут присутствовать параметры метода **AddCustomer**.
			 *     Если они присутствуют, то автоматически привязываются к клиенту.
			 *     Например, если указать:
			 *     ```
			 *     "DATA":{"Phone":"+71234567890", "Email":"a@test.com"}
			 *     ```
			 *     к клиенту автоматически будут привязаны данные Email и телефон,
			 *     и они будут возвращаться при вызове метода **GetCustomer**.
			 *
			 *         Для МСС 4814 обязательно передать значение в параметре `Phone`
			 *
			 *         Для МСС 6051 и 6050 обязательно передать параметр `account` (номер электронного кошелька, не должен превышать 30 символов). Пример:
			 *     ```
			 *     "DATA": {"account":"123456789"}
			 *     ```
			 *     2. Если используется функционал сохранения карт на платежной форме,
			 *     то при помощи опционального параметра `DefaultCard` можно задать
			 *     какая карта будет выбираться по умолчанию.
			 *     Возможные варианты:
			 *     * Оставить платежную форму пустой. Пример:
			 *       ```
			 *       "DATA":{"DefaultCard":"none"}
			 *       ```
			 *     * Заполнить данными передаваемой карты. В этом случае передается `CardId`. Пример:
			 *       ```
			 *       "DATA":{"DefaultCard":"894952"}
			 *       ```
			 *     * Заполнить данными последней сохраненной карты. Применяется, если параметр `DefaultCard` не передан, передан с некорректным значением или в значении null
			 *
			 *     3. При реализации подключения оплаты через Yandex Pay Web или T‑Pay Web,
			 *     необходимо обязательно передавать соотвествующие параметры в объекте Data
			 *     4. Для осуществления привязки и одновременной оплаты по CБП необходимо передавать параметр "QR" = "true"
			 *      */
			DATA?:
				| components["schemas"]["Common"]
				| components["schemas"]["T-Pay"]
				| components["schemas"]["YandexPay"]
				| components["schemas"]["LongPay"];
			/** @description JSON объект с данными чека */
			Receipt?:
				| components["schemas"]["Receipt_FFD_105"]
				| components["schemas"]["Receipt_FFD_12"];
			/** @description JSON объект с данными Маркетплейса */
			Shops?: components["schemas"]["Shops"][];
		};
		Response: {
			/**
			 * @description Идентификатор терминала. Выдается Мерчанту Т‑Кассой
			 *     при заведении терминала
			 *
			 * @example TinkoffBankTest
			 */
			TerminalKey: string;
			/**
			 * @description Сумма в копейках
			 *
			 * @example 100000
			 */
			Amount: number;
			/**
			 * @description Идентификатор заказа в системе Мерчанта
			 *
			 * @example 21050
			 */
			OrderId: string;
			/**
			 * @description Успешность прохождения запроса (true/false)
			 *
			 * @example true
			 */
			Success: boolean;
			/**
			 * @description Статус транзакции
			 *
			 * @example NEW
			 */
			Status: string;
			/**
			 * @description Идентификатор платежа в системе Т‑Кассы
			 *
			 * @example 13660
			 */
			PaymentId: string;
			/**
			 * @description Код ошибки. «0» в случае успеха
			 *
			 * @example 0
			 */
			ErrorCode: string;
			/**
			 * Format: uri
			 * @description Ссылка на платежную форму (параметр возвращается только `для Мерчантов без PCI DSS`)
			 *
			 * @example https://securepay.tinkoff.ru/rest/Authorize/1B63Y1
			 */
			PaymentURL?: string;
			/**
			 * @description Краткое описание ошибки
			 *
			 * @example Неверные параметры
			 */
			Message?: string;
			/**
			 * @description Подробное описание ошибки
			 *
			 * @example 0
			 */
			Details?: string;
		};
		/** @description Информация о платеже */
		PaymentData: {
			/**
			 * @description Идентификатор терминала, выдается Мерчанту Т‑Кассой
			 * @example TinkoffBankTest
			 */
			TerminalKey: string;
			/**
			 * @description Сумма в копейках. Параметр "Amount" должен быть равен сумме всех параметров "Amount", переданных в объекте Items
			 * @example 1751
			 */
			Amount: number;
			/**
			 * @description Уникальный номер заказа в системе Мерчанта
			 * @example autoOrd1615285401068DELb
			 */
			OrderId?: string;
			/** @description Краткое описание */
			Description?: string;
			/** @description JSON объект, содержащии дополнительные параметры в виде "ключ" — «значение». Данные параметры будут переданы на страницу оплаты (в случае ее кастомизации). <br> Максимальная длина для каждого передаваемого параметра! <br> ключ — 20 знаков; <br> значение — 100 знаков. <br> Максимальное количество пар «ключ значение» не может превышать 20 */
			DATA?: Record<string, never>;
			Receipt?: components["schemas"]["Receipt_FFD_105"];
		};
		/** @description Информация о платеже */
		PaymentInfos: {
			/** @description Адрес электронной почты покупателя */
			InfoEmail?: string;
			/** @description Идентификатор вашего магазина */
			PaymentData: components["schemas"]["PaymentData"];
		};
		PaymentItem: {
			container: string;
			paymentInfo: components["schemas"]["PaymentInfos"];
		};
		/** @description Объект с информацией о платежных системах */
		"T-Payweb": {
			/** @description Объект с информацией о T‑Pay */
			TinkoffPay?: Record<string, never>;
		};
		/** @description Объект с информацией о платежных системах */
		TbankFps: {
			/** @description Объект с информацией о СБП */
			TinkoffPay?: Record<string, never>;
		};
		InitPayments: {
			/** @description ID элемента или элемент, в который вставляются кнопки */
			container?: string;
			/** @description Идентификатор вашего магазина */
			TerminalKey: string;
			/** @description Информация о платеже */
			paymentInfo?: components["schemas"]["PaymentInfos"];
			/** @description Список объектов с информацией о размещаемых кнопках */
			paymentItems?: [components["schemas"]["PaymentItem"]];
			/** @description Объект с информацией о платежных системах */
			paymentSystems?:
				| components["schemas"]["T-Payweb"]
				| components["schemas"]["TbankFps"];
		};
		/** Пример ответа */
		InitPaymentsResponse: {
			/**
			 * @description Успешность прохождения запроса
			 * @example true
			 * @enum {boolean}
			 */
			Success?: true | false;
		};
		"3DSv2": {
			/**
			 * @description `deviceChannel 02 — BRW`<br>
			 *     Идентификатор выполнения 3DS Method:
			 *     * 'Y' — выполнение метода успешно завершено,
			 *     * 'N' — выполнение метода завершено неуспешно или метод не выполнялся.
			 *
			 * @example Y
			 */
			threeDSCompInd: string;
			/**
			 * @description `deviceChannel 02 — BRW`<br>
			 *     Язык браузера по формату IETF BCP47.
			 *     Рекомендация по получению значения в браузере (из глобального объекта navigator):`navigator.language`
			 *
			 * @example RU
			 */
			language: string;
			/**
			 * @description `deviceChannel 02 — BRW`<br>
			 *     Time-zone пользователя в минутах.
			 *     Рекомендация по получению значения в браузере: вызов метода `getTimezoneOffset()`
			 *
			 * @example -300
			 */
			timezone: string;
			/**
			 * @description `deviceChannel 02 — BRW`<br>
			 *     Высота экрана в пикселях.
			 *     Рекомендация по получению значения в браузере (из глобального объекта screen): `screen.height`
			 *
			 * @example 1024
			 */
			screen_height: string;
			/**
			 * @description `deviceChannel 02 — BRW`<br>
			 *     Ширина экрана в пикселях.
			 *     Рекомендация по получению значения в браузере (из глобального объекта screen): `screen.width`
			 *
			 * @example 967
			 */
			screen_width: string;
			/**
			 * @description `deviceChannel 02 — BRW`<br>
			 *     URL который будет использоваться для получения результата (CRES) после завершения Challenge Flow (аутентификации с дополнительным переходом на страницу ACS)
			 *
			 * @example www.callbackurl.ru
			 */
			cresCallbackUrl: string;
			/**
			 * @description `deviceChannel 02 — BRW`<br>
			 *     Глубина цвета в битах
			 *     <br> Допустимые значения: 1/4/8/15/16/24/32/48
			 *     <br> Рекомендация по получению значения в браузере (из глобального объекта screen): `screen.colorDepth`
			 *
			 * @default 48
			 * @example 48
			 */
			colorDepth: string;
			/**
			 * @description `deviceChannel 02 — BRW`<br>
			 *     Поддерживает ли браузер пользователя Java:
			 *     * true,
			 *     * false.
			 *
			 * @default false
			 * @example false
			 */
			javaEnabled: string;
		};
		FinishAuthorize_FULL: {
			/**
			 * @description Идентификатор терминала. <br>
			 *     Выдается Мерчанту Т‑Кассой при заведении терминала
			 *
			 * @example TinkoffBankTest
			 */
			TerminalKey: string;
			/**
			 * @description Уникальный идентификатор транзакции в
			 *     системе Т‑Кассы
			 *
			 * @example 700001702044
			 */
			PaymentId: string;
			/**
			 * @description Подпись запроса
			 *
			 * @example f5a3be479324a6d3a4d9efa0d02880b77d04a91758deddcbd9e752a6df97cab5
			 */
			Token: string;
			/**
			 * @description IP-адрес клиента.
			 *
			 *     Обязательный параметр для 3DS второй
			 *     версии. DS платежной системы требует
			 *     передавать данный адрес в полном формате,
			 *     без каких-либо  сокращений (8 групп по 4 символа).
			 *
			 *     Данный формат регламентируется на уровне
			 *     спецификации EMVCo<br>
			 *
			 *     Пример правильного адреса:
			 *       ``` 2011:0db8:85a3:0101:0101:8a2e:0370:7334 ```<br>
			 *     Пример неправильного адреса:
			 *     ``` 2a00:1fa1:c7da:9285:0:51:838b:1001 ```
			 *
			 * @example 2011:0db8:85a3:0101:0101:8a2e:0370:7334
			 */
			IP?: string;
			/** @description * true — отправлять клиенту информацию на
			 *     почту об оплате;
			 *     * false — не отправлять.
			 *      */
			SendEmail?: boolean;
			/**
			 * @description Источник платежа.
			 *     Значение параметра зависит от параметра Route
			 *     - ACQ — cards (так же поддерживается написание Cards), YandexPay,
			 *     - MC — beeline / mts / tele2 / megafon,
			 *     - EINV — einvoicing,
			 *     - WM — webmoney.
			 *
			 * @example cards
			 * @enum {string}
			 */
			Source?:
				| "cards"
				| "beeline"
				| "mts"
				| "tele2"
				| "megafon"
				| "einvoicing"
				| "webmoney"
				| "YandexPay";
			/** @description JSON объект, содержащий дополнительные
			 *     параметры в виде `ключ`:`значение`.
			 *     Данные параметры будут переданы на страницу
			 *     оплаты (в случае ее кастомизации).
			 *     Максимальная длина для каждого передаваемого параметра:
			 *     * Ключ — 20 знаков,
			 *     * Значение — 100 знаков. <br>
			 *     Максимальное количество пар `ключ`:`значение` не может
			 *     превышать 20
			 *      */
			DATA?:
				| components["schemas"]["3DSv2"]
				| {
						[key: string]: string | undefined;
				  };
			/**
			 * Format: email
			 * @description Email для отправки информации об оплате.
			 *     Обязателен при передаче `SendEmail`
			 *
			 * @example qwerty@test.com
			 */
			InfoEmail?: string;
			/** @description Данные карты.
			 *     Используется и является обязательным только
			 *     для ApplePay или GooglePay
			 *      */
			EncryptedPaymentData?: string;
			/**
			 * @description Объект CardData собирается в виде списка `ключ`=`значение` c разделителем `;`.
			 *     Объект зашифровывается открытым ключом (X509 RSA 2048), получившееся бинарное значение кодируется в `Base64`.
			 *     Открытый ключ генерируется Т‑Кассой и выдается при регистрации терминала.
			 *     Доступен в ЛК ИЭ в разделе "Магазины", при изменении типа подключения на "Мобильное".
			 *
			 *     |Наименование|Тип данных|Обязательность|Описание|
			 *     |---|---|---|---|
			 *     |PAN|Number|ДА|Номер карты|
			 *     |ExpDate| Number|Да| Месяц и год срока действия карты в формате MMYY|
			 *     |CardHolder |String| Нет| Имя и фамилия держателя карты (как на карте)|
			 *     |CVV |String| Нет |Код защиты (с обратной стороны карты). Для платежей по Apple Pay (с расшифровкой токена на своей стороне) не является обязательным|
			 *     |ECI |String |Нет |Electronic Commerce Indicator. Индикатор, показывающий степень защиты, применяемую при предоставлении клиентом своих данных ТСП|
			 *     |CAVV |String |Нет |Cardholder Authentication Verification Value или Accountholder Authentication Value|
			 *
			 *
			 *     Пример значения элемента формы CardData:
			 *     ```
			 *     PAN=4300000000000777;ExpDate=0519;CardHolder=IVAN PETROV;CVV=111
			 *     ```
			 *
			 *     Для YandexPay (расшифровка токена происходит на стороне Мерчанта) надо:
			 *     1. Передавать `Route=ACQ` и `Source=YandexPay`.
			 *     2. Передавать в `DATA.transactionId` значение `PaymentToken.messageId`.
			 *     3. Передавать в `DATA.YandexPayWeb` значение true.
			 *     4. Передавать параметр **CardData**:
			 *         Размапить параметры из расшифрованного токена `event.token`
			 *         - `paymentMethodDetails.pan` в **pan**,
			 *         - `paymentMethodDetails,expirationMonth` + `paymentMethodDetails.expirationYear` в **ExpDate**,
			 *         - `paymentMethodDetails.cryptogram` в **CAVV** (если есть),
			 *         - `paymentMethodDetails.eci` в **ECI** (если есть).<br>
			 *
			 *     Для MirPay (если интеграция с НСПК для получения платежного токена) надо:
			 *     1. Передавать `Route=ACQ` и `Source= MirPay`.
			 *     2. Передавать в `DATA.transId` значение `transId`.
			 *     3. Передавать в `DATA.tavv` значение `cav`.
			 *     4. Передавать параметр **CardData**:
			 *         - **Pan** заполнять `tan`,
			 *         - **ExpDate** заполнять `tem + tey`.<br>
			 *     Для случая, когда Мерчант интегрируется только с Банком для проведения платежа по MirPay данный
			 *     метод не вызывается. Эквайер самостоятельно получает платежный токен и инициирует авторизацию,
			 *     вместо Мерчанта<br>
			 *
			 *     В случае получения **CAVV** в **CardData** оплата будет проводиться как оплата токеном, иначе прохождение 3DS будет регулироваться стандартными настройками треминала/платежа
			 *
			 *     Не используется и не является обязательным, если передается `EncryptedPaymentData`
			 * @example eyJzaWduYXR1cmUiOiJNRVVDSVFEdjNJS1A5WG9nWml4RytUUm9zZWFDK0RGd3RKd2FtMHVEcm91RUVGZVB6Z0lnYXBFbHhxQ3AwQWtZcVVmTFVMaVNhUjBKWkVQNmg 4THFqYks5YkJKQnM5d1x1MDAzZCIsInByb3RvY29sVmVyc2lvbiI6IkVDdjEiLCJzaWduZWRNZXNzYWdlIjoie1wiZW5jcnlwdGVkTWVzc2FnZVwiOlwiQW11dm5OYUIralBsa3VKTitrMUZLSDZFcm1VK2lTY052 L05rR3FFaXIxOHZmSWxkVFJ5L2U4cW5zMXkyanFtcm1acU1JSWNYMUhyTHBxRURpaXkvS3B6SUhNZFllcXRkSVVNOU1tRjNpejU2d2NTZUVVaXU2ODI3QThGcitaYm8xRWtWRjY1TUxRYVY3NlBOUFRndH UvQ1BodW5HUk0rN25KdVhDczVtbkVvOHFma0RNVk8xWktGWDQ4TnVEL2FKcDJQdVVIY2puSnBTZ0pTSDB4U21YSnAzU1MreXFDNm54N254WUEwN2h4YjYvSnp2R2s3ZExDU2hWWGU1Z2haUjNDaFQyV W8rRnpXTWJRRGZtSjBLQW9kc2VlR0xaaitqMzVqOUlKMkhJRFhIUUZZMWNuTW9YVUVoTjgvdEkvRkpqRnJiYVdFRkIzRDZwOFUzT2tkUmVaNHAyYi8yYURNZXVxR1ozSUtjc3R0R2lKMFhQQVhhZXYyQU8 o1M3RRQXVqQXRYdFlaekNTVjVBVXdXZS85T1VcXHUwMDNkXCJ9In0=
			 */
			CardData: string;
			/**
			 * @description Сумма в копейках
			 *
			 * @example 10000
			 */
			Amount?: number;
			/**
			 * @description Канал устройства.
			 *     Поддерживается следующий
			 *     канал устройства:
			 *     * 01 = Application (APP),
			 *     * 02 = Browser (BRW) (используется по умолчанию, передавать параметр не требуется).
			 *
			 * @example 02
			 */
			deviceChannel?: string;
			/**
			 * @description Способ платежа.
			 *     Является обязательным для ApplePay или GooglePay
			 *
			 * @example ACQ
			 * @enum {string}
			 */
			Route?: "ACQ" | "MC" | "EINV" | "WM";
		};
		"3DSv2SDK": {
			/**
			 * @description `deviceChannel 01 — APP`<br>
			 *     Уникальный идентификатор приложения 3DS Requestor, который формируется 3DS SDK при каждой установке или обновлении приложения
			 *
			 * @example 6dg99s67h9d6hv
			 */
			sdkAppID: string;
			/**
			 * @description `deviceChannel 01 — APP`<br>
			 *     Данные, собранные SDK
			 *     <br> JWE объект, полученный от 3DS SDK
			 *     <br> Должен быть дополнительно закодирован в `base64` строку
			 *
			 * @example f8s9v04bvglglgkvkUO0UvUF7rHlKL
			 */
			sdkEncData: string;
			/**
			 * @description `deviceChannel 01 — APP`<br>
			 *     Компонент public key пары ephemeral key, сгенерированный 3DS SDK
			 *     <br> JWE объект, полученный от 3DS SDK, должен быть дополнительно закодирован в `base64` строку
			 *
			 * @example f8s9v04POPP479GHky5dG7InO0UvUF7rHlKL
			 */
			sdkEphemPubKey: string;
			/**
			 * @description `deviceChannel 01 — APP`<br>
			 *     Максимальное количество времени (в минутах)
			 *
			 * @example 05
			 */
			sdkMaxTimeout: string;
			/**
			 * @description `deviceChannel 01 — APP`<br>
			 *     Поставщик и версия 3DS SDK
			 *
			 * @example 3DSV2
			 */
			sdkReferenceNumber: string;
			/**
			 * @description `deviceChannel 01 — APP`<br>
			 *     Уникальный идентификатор транзакции, назначенный 3DS SDK для идентификации одной транзакции
			 *
			 * @example 194050GHYYtu86nOJ
			 */
			sdkTransID: string;
			/**
			 * @description `deviceChannel 01 — APP`<br>
			 *     Список поддерживаемых интерфейсов SDK
			 *     <br> Поддерживаемые значения:
			 *     * 01 = Native,
			 *     * 02 = HTML,
			 *     * 03 = Both.
			 *
			 * @example 02
			 */
			sdkInterface: string;
			/**
			 * @description `deviceChannel 01 — APP`<br>
			 *     Список поддерживаемых типов UI
			 *     <br> Значения для каждого интерфейса:
			 *     * Native UI = 01–04,
			 *     * HTML UI = 01–05.
			 *     <br> Поддерживаемые значения:
			 *     * 01 = Text,
			 *     * 02 = Single Select,
			 *     * 03 = Multi Select,
			 *     * 04 = OOB,
			 *     * 05 = HTML Other (valid only for HTML UI).
			 *
			 * @example 04
			 */
			sdkUiType: string;
		};
		FinishAuthorize_SDK: {
			/**
			 * @description Идентификатор терминала. <br>
			 *     Выдается Мерчанту Т‑Кассой при заведении терминала
			 *
			 * @example TinkoffBankTest
			 */
			TerminalKey: string;
			/**
			 * @description Уникальный идентификатор транзакции в
			 *     системе Т‑Кассы
			 *
			 * @example 700001702044
			 */
			PaymentId: string;
			/**
			 * @description Подпись запроса
			 *
			 * @example f5a3be479324a6d3a4d9efa0d02880b77d04a91758deddcbd9e752a6df97cab5
			 */
			Token: string;
			/**
			 * @description IP-адрес клиента.
			 *
			 *     Обязательный параметр для 3DS второй
			 *     версии. DS платежной системы требует
			 *     передавать данный адрес в полном формате,
			 *     без каких-либо  сокращений (8 групп по 4 символа).
			 *
			 *     Данный формат регламентируется на уровне
			 *     спецификации EMVCo
			 *
			 * @example 2011:0db8:85a3:0101:0101:8a2e:0370:7334
			 */
			IP?: string;
			/** @description * true — отправлять клиенту информацию на
			 *     почту об оплате;
			 *     * false — не отправлять.
			 *      */
			SendEmail?: boolean;
			/**
			 * @description Источник платежа
			 *
			 * @example YandexPay
			 * @enum {string}
			 */
			Source?:
				| "cards"
				| "einvoicing"
				| "Installment"
				| "qrsbp"
				| "Bnpl"
				| "MC"
				| "RC"
				| "VC"
				| "TinkoffPay"
				| "TinkoffWallet"
				| "YandexPay"
				| "UP";
			/** @description JSON объект, содержащий дополнительные
			 *     параметры в виде “ключ”:”значение”.
			 *     Данные параметры будут переданы на страницу
			 *     оплаты (в случае ее кастомизации).
			 *     Максимальная длина для каждого передаваемого параметра:
			 *     * Ключ — 20 знаков,
			 *     * Значение — 100 знаков.<br>
			 *     Максимальное количество пар «ключ-значение» не может
			 *     превышать 20
			 *      */
			DATA?:
				| components["schemas"]["3DSv2SDK"]
				| {
						[key: string]: string | undefined;
				  };
			/**
			 * Format: email
			 * @description Email для отправки информации об оплате.
			 *     Обязателен при передаче SendEmai
			 *
			 * @example qwerty@test.com
			 */
			InfoEmail?: string;
			/** @description Данные карты
			 *      */
			EncryptedPaymentData?: string;
			/**
			 * @description Объект CardData собирается в виде списка `ключ`=`значение` c разделителем `;`.
			 *     Объект зашифровывается открытым ключом (X509 RSA 2048), получившееся бинарное значение кодируется в `Base64`.
			 *     Открытый ключ генерируется Т‑Кассой и выдается при регистрации терминала.
			 *     Доступен в ЛК ИЭ в разделе "Магазины", при изменении типа подключения на "Мобильное".
			 *
			 *     |Наименование|Тип данных|Обязательность|Описание|
			 *     |---|---|---|---|
			 *     |PAN|Number|ДА|Номер карты|
			 *     |ExpDate| Number|Да| Месяц и год срока действия карты в формате MMYY|
			 *     |CardHolder |String| Нет| Имя и фамилия держателя карты (как на карте)|
			 *     |CVV |String| Нет |Код защиты (с обратной стороны карты). Для платежей по Apple Pay (с расшифровкой токена на своей стороне) не является обязательным|
			 *     |ECI |String |Нет |Electronic Commerce Indicator. Индикатор, показывающий степень защиты, применяемую при предоставлении клиентом своих данных ТСП|
			 *     |CAVV |String |Нет |Cardholder Authentication Verification Value или Accountholder Authentication Value|
			 *
			 *
			 *     Пример значения элемента формы CardData:
			 *     ```
			 *     PAN=4300000000000777;ExpDate=0519;CardHolder=IVAN PETROV;CVV=111
			 *     ```
			 *
			 *     Для YandexPay (расшифровка токена происходит на стороне Мерчанта) надо:
			 *     1. Передавать `Route=ACQ` и `Source=YandexPay`.
			 *     2. Передавать в `DATA.transactionId` значение `PaymentToken.messageId`.
			 *     3. Передавать в `DATA.YandexPayWeb` значение true.
			 *     4. Передавать параметр **CardData**:
			 *         Размапить параметры из расшифрованного токена `event.token`
			 *         - `paymentMethodDetails.pan` в **pan**,
			 *         - `paymentMethodDetails,expirationMonth` + `paymentMethodDetails.expirationYear` в **ExpDate**,
			 *         - `paymentMethodDetails.cryptogram` в **CAVV** (если есть),
			 *         - `paymentMethodDetails.eci` в **ECI** (если есть).<br>
			 *
			 *     Для MirPay (если интеграция с НСПК для получения платежного токена) надо:
			 *     1. Передавать `Route=ACQ` и `Source= MirPay`.
			 *     2. Передавать в `DATA.transId` значение `transId`.
			 *     3. Передавать в `DATA.tavv` значение `cav`.
			 *     4. Передавать параметр **CardData**:
			 *         - **Pan** заполнять `tan`,
			 *         - **ExpDate** заполнять `tem + tey`.<br>
			 *     Для случая, когда Мерчант интегрируется только с Банком для проведения платежа по MirPay данный
			 *     метод не вызывается. Эквайер самостоятельно получает платежный токен и инициирует авторизацию,
			 *     вместо Мерчанта<br>
			 *
			 *     В случае получения **CAVV** в **CardData** оплата будет проводиться как оплата токеном, иначе прохождение 3DS будет регулироваться стандартными настройками треминала/платежа
			 *
			 *     Не используется и не является обязательным, если передается `EncryptedPaymentData`
			 * @example eyJzaWduYXR1cmUiOiJNRVVDSVFEdjNJS1A5WG9nWml4RytUUm9zZWFDK0RGd3RKd2FtMHVEcm91RUVGZVB6Z0lnYXBFbHhxQ3AwQWtZcVVmTFVMaVNhUjBKWkVQNmg 4THFqYks5YkJKQnM5d1x1MDAzZCIsInByb3RvY29sVmVyc2lvbiI6IkVDdjEiLCJzaWduZWRNZXNzYWdlIjoie1wiZW5jcnlwdGVkTWVzc2FnZVwiOlwiQW11dm5OYUIralBsa3VKTitrMUZLSDZFcm1VK2lTY052 L05rR3FFaXIxOHZmSWxkVFJ5L2U4cW5zMXkyanFtcm1acU1JSWNYMUhyTHBxRURpaXkvS3B6SUhNZFllcXRkSVVNOU1tRjNpejU2d2NTZUVVaXU2ODI3QThGcitaYm8xRWtWRjY1TUxRYVY3NlBOUFRndH UvQ1BodW5HUk0rN25KdVhDczVtbkVvOHFma0RNVk8xWktGWDQ4TnVEL2FKcDJQdVVIY2puSnBTZ0pTSDB4U21YSnAzU1MreXFDNm54N254WUEwN2h4YjYvSnp2R2s3ZExDU2hWWGU1Z2haUjNDaFQyV W8rRnpXTWJRRGZtSjBLQW9kc2VlR0xaaitqMzVqOUlKMkhJRFhIUUZZMWNuTW9YVUVoTjgvdEkvRkpqRnJiYVdFRkIzRDZwOFUzT2tkUmVaNHAyYi8yYURNZXVxR1ozSUtjc3R0R2lKMFhQQVhhZXYyQU8 o1M3RRQXVqQXRYdFlaekNTVjVBVXdXZS85T1VcXHUwMDNkXCJ9In0=
			 */
			CardData: string;
		};
		FinishAuthorize: {
			/**
			 * @description Идентификатор терминала. Выдается Мерчанту Т‑Кассой
			 *     при заведении терминала
			 *
			 * @example TinkoffBankTest
			 */
			TerminalKey: string;
			/**
			 * @description Сумма в копейках
			 *
			 * @example 100000
			 */
			Amount: number;
			/**
			 * @description Идентификатор заказа в системе Мерчанта
			 *
			 * @example 21050
			 */
			OrderId: string;
			/**
			 * @description Успешность прохождения запроса (true/false)
			 *
			 * @example true
			 */
			Success: boolean;
			/**
			 * @description Статус транзакции.
			 *     Получает в ответе 1 из 4 статусов платежа:
			 *       * CONFIRMED — при одностадийной оплате,
			 *       * AUTHORIZED — при двухстадийной оплате,
			 *       * 3DS_CHECKING — при необходимости прохождения проверки 3-D Secure. Если используется своя ПФ (протокол EACQ C PCI DSS) и платеж завис в таком статусе, необходимо обратиться к эмитенту для устранения ошибок оплаты;
			 *       * REJECTED — при неуспешном прохождении платежа.
			 *
			 * @example NEW
			 */
			Status: string;
			/**
			 * @description Идентификатор платежа в системе Т‑Кассы
			 *
			 * @example 13660
			 */
			PaymentId?: string;
			/**
			 * @description Код ошибки. «0» в случае успеха
			 *
			 * @example 0
			 */
			ErrorCode: string;
			/**
			 * @description Краткое описание ошибки
			 *
			 * @example Неверные параметры
			 */
			Message?: string;
			/**
			 * @description Подробное описание ошибки
			 *
			 * @example 0
			 */
			Details?: string;
			/**
			 * @description Идентификатор рекуррентного платежа
			 * @example 21813157
			 */
			RebillId?: string;
			/** @description Идентификатор карты в системе Т‑Кассы. Передается только для сохраненной карты */
			CardId?: string;
		};
		Without3DS: components["schemas"]["FinishAuthorize"] & {
			/** @description Идентификатор карты в системе Т‑Кассы.
			 *     Передается только для сохраненной карты
			 *      */
			CardId?: string;
		};
		With3DS: components["schemas"]["FinishAuthorize"] & {
			/**
			 * @description Уникальный идентификатор транзакции в системе Т‑Кассы
			 *
			 * @example ACQT-563587431
			 */
			MD?: string;
			/**
			 * @description Шифрованная строка, содержащая результаты 3-D Secure аутентификации (возвращается в ответе от ACS)
			 *
			 * @example "eJxVUl1TwjAQ/CtM30s+KLTDHGHQwsiogFh09C2kp1RpC2nLh7/eBAtqnnYvN3ubvUD/kK4bO9RFkmc9hzWp08BM5XGSvfecRTRyA6cvIFppxP
			 *     ARVaVRwD0WhXzHRhL3HMUU73itwKVtyl1Pcs8Nli3pymUQK+z2Sww6joDZYI5bAfUgYeY0OZAzNYparWRWCpBqezWeiDZnLe3BqSmkqMeh4PRy2p
			 *     02BfJThkymKCIsSiAnCCqvslIfhXEG5Eyg0muxKstN0SVkv983yyT7zN/emroiQOwlkF8js8qiwogdklg8rEfT5WK0jj6G7D4cepNo8TWNBmwSDXtAbAfEskTjkPk0
			 *     oF6DeV3a6jLj8VQHmVoXglFTqTFs7IjBn4u/BTBZa7OK8yPODPCwyTM0HSbACwby6/f6xsaoSpNMMN89+uHdV/iUPz2nyat/uxrPXz5nuX/c2nBPTVYxMflwzthJ0hIgVobUeyP1yg469xW+AedOuuM="
			 *
			 */
			PaReq?: string;
			/**
			 * Format: uri
			 * @description Если в ответе метода **FinishAuthorize** возвращается статус **3DS_CHECKING**,
			 *     Мерчанту необходимо сформировать запрос на URL ACS банка,
			 *     выпустившего карту (в ответе параметр `ACSUrl`) и вместе с этим перенаправить клиента на эту же страницу ACSUrl для прохождения 3DS
			 *
			 * @example https://secure.tcsbank.ru/acs/auth/start.do
			 */
			ACSUrl?: string;
		};
		With3DSv2APP: components["schemas"]["FinishAuthorize"] &
			Record<string, never> & {
				/**
				 * @description Уникальный идентификатор транзакции,генерируемый 3DS-Server, обязательный параметр для 3DS второй версии
				 *
				 * @example d93f7c66-3ecf-4d10-ba62-46046e7b7596
				 */
				TdsServerTransId: string;
				/**
				 * @description Идентификатор транзакции,присвоенный ACS, полученный в ответе на FinishAuthorize
				 *
				 * @example aceca6af-56ee-43f0-80ef-ea8d30d5c5b0
				 */
				AcsTransId: string;
				/**
				 * Format: uri
				 * @description `Обязательное поле, если Transaction Status = C`<br>
				 *     Тип пользовательского интерфейса ACS.
				 *     <br> Возможные значения:
				 *       - 01 - Native UI,
				 *       - 02 - HTML UI.
				 *
				 * @example 02
				 */
				AcsInterface?: string;
				/**
				 * Format: uri
				 * @description `Обязательное поле, если Transaction Status = C`<br>
				 *     Формат шаблона пользовательского интерфейса ACS.
				 *     <br> Возможные значения:
				 *       - 01 - Text,
				 *       - 02 - Single Select,
				 *       - 03 - Multi Select,
				 *       - 04 - OOB,
				 *       - 05 - HTML Other (valid only for HTML UI).
				 *
				 * @example 03
				 */
				AcsUiTemplate?: string;
				/**
				 * Format: uri
				 * @description `Обязательное поле, если Transaction Status = C`<br>
				 *     JWS object (представленный как string), созданный ACS для ARes.
				 *     <br> Содержит:
				 *       - ACS URL (3DS SDK должен отправить Challenge Request на этот URL),
				 *       - ACS Ephemeral Public Key (QT),
				 *       - SDK Ephemeral Public Key (QC).
				 *
				 * @example eyJ4NWMiOlsiTUlJRGtUQ0NBbm1nQXdJQkFnSVVRU1VEV05VZEFicWozS1Uya0M0VHpaSEpVVHd3RFFZSktvWklodmNOQVFFTEJRQXdXREVMTUFrR0ExVUVCaE1DVWxVeER6QU5CZ05WQkFnTUJrMXZjMk52ZHpFUE1BMEdBMVVFQnd3R1RXOXpZMjkzTVJJ d0VBWURWUVFLREFsVGIyMWxJR0poYm1zeEV6QVJCZ05WQkFNTUNtUnpMbTF2WTJzdWNuVXdIaGNOTWpBd056RTRNVFExT1RNM1doY05NakV3TnpFNE1UUTFPVE0zV2pCWU1Rc3dDUVlEVlFRR0V3SlNWVEVQTUEwR0ExVUVDQXdHVFc5elkyOTNNUTh3RF FZRFZRUUhEQVpOYjNOamIzY3hFakFRQmdOVkJBb01DVk52YldVZ1ltRnVhekVUTUJFR0ExVUVBd3dLWkhNdWJXOWpheTV5ZFRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTUhNdXB1Wlg3VUFWR3Z5dm9uZ1o4U3BJcisrRD RnMjBRaFwvZ0NGb3JUN1pDUkRaVWhRamlDSzdXSWpiVHRKQUFKVG1yelhcLzlMSGJIdHpIcFFvRFVTNXZPTnRqVWFaVGVQUE91SklMRWl6NDBBVjJCUVZRd0xnRzBjbm9oK21Qa0dNMEZ4VmJFcHFEVHk3SHB0dFAwdm96cGxHNjdFWk1HTXdKSUpESmlDYUdG OGZ0aTlYR3M4MXB3NUhWZElmOHNpQnFaWW94cGt0QWJ1dnpBTFJEUnp3dFBhclFHOTZyQStPM0dJaE53VDhZXC9pallwS0hWNkJCWDBKNmxZdFdoaVY5blhBVktYNTNlVTJ4M1E2Njh4U3BLa2dwSVh1N2xiNUN2M2dDTlIrelVqK0lTODNZYjJhUlR2WkF6MFI1 V3dBNW5Zb2J6V3Vta1wvdE5iV1FYdzBWTUNBd0VBQWFOVE1GRXdIUVlEVlIwT0JCWUVGRmVWN0dzR0tCSzhUTDljaVk4UFF2N0RhY290TUI4R0ExVWRJd1FZTUJhQUZGZVY3R3NHS0JLOFRMOWNpWThQUXY3RGFjb3RNQThHQTFVZEV3RUJcL3dRRk1BT UJBZjh3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUZqVGppUkxKOFpaWld5dXFLNTZHVkR6dnJiXC9uRlVDTHVjVXZEV2toK09lRWkxWUFPOUJZV3RFVTVzdmRNNTlsOWVTMGtjbGxrRzVDTklcL1U4S2dKSnUzV0tEVXp5cU80eVRNU3g3RWZDXC9qVE1oT2d2Y UJubktWK2hvV3FQZTlKNHZVYzZ2R0wzWE1cL0FNeWpoVDlBRko1ZjZBaVdZMk5QYkxHczQ2N0ZPY2Vwb1RJMkdseHBtcWdaMFVGKzlsblNZbDU0WEg2dGNZYUszWjcxS2NES0I0QkUySWVmV1Y3MUM3anBVdjFFSlFsNTY4XC8xaGpsZktXUExWcE5NTzVlTlNMR 1ZKd1VmdFA0V0tKU2Y2VmdtbG5XOU1yVStiK3hvZW44MFF1dUxrSWs1ZXBIM2l1ZDV4a1IxcVVXQU1aTUZTQW4yUHJDdjQrZFFMRDd2OG83d3BrPSJdLCJhbGciOiJQUzI1NiJ9.eyJhY3NFcGhlbVB1YktleSI6eyJrdHkiOiJFQyIsImNydiI6IlAtMjU2IiwieCI6IlRoRj NJY3BIMVVLanliQW5lNWhHcy1BNnpyYXo2aUxiYVk0WmVEOU1oSU0iLCJ5Ijoid0VuVXNvNlRLZDlfbjZSc2NjUXRCeFc2Q1gzLXFSTGk0UWJBU3pNbm4tTSJ9LCJzZGtFcGhlbVB1YktleSI6eyJrdHkiOiJFQyIsImNydiI6IlAtMjU2IiwieCI6Ikp6R2tGM2w3WGxnclJ6NU 1PTl9ncDg3WUxfd0NkVVJpVUlxOXJmNnVyR2MiLCJ5IjoiTnI4UmllTE9vVzJXUkhiX2RFazFmdHRoWEZXTHdYaWZFUzNZZkFnMkhvWSJ9LCJhY3NVUkwiOiJodHRwczovL2VhY3EtZHMtbW9jay1zZXJ2aWNlLXRlc3QudGNzYmFuay5ydS9jaGFsbGVuZ2UvZDkzZjdj NjYtM2VjZi00ZDEwLWJhNjItNDYwNDZlN2I3NTk2In0.hQLVTT5YMAY8TjISRdYX2IT04zH8Z8DgoB4kIAyVfkuJ0X6AGIKXSVcIVSNgC-A_SEkCZRqAyUeu0ZJtpoIVyOf1mumBGEK-uC6yVQlX5WSPidQUj4nuBvpYsfdrGPeoHWvNsrBpMMxvvW4559jtbAUY00NcW3rwDShAi4gVKgJcssMPAM1zOOR5vi0_ClUsCW1k9a201Hv6cYcEBuO2JQ8NPLampEkZ55nOmwcPPTEziXeZsq9VjROXNfBewbA4wLuQmh8aSrcOcwFtJo0CPpdrsKiY77KPT0c8XMmZZK_FiAxzrWocfHraqC7cRJNQ5glEBakXvSfrwGg_xXA
				 */
				AcsSignedContent?: string;
				/**
				 * Format: uri
				 * @description Уникальный идентификатор, назначенный EMVCo
				 * @example 12345
				 */
				AcsReferenceNumber: string;
				/**
				 * Format: uri
				 * @description Уникальный идентификатор транзакции,назначенный 3DS SDK для идентификации одной транзакции,полученный в ответе на FinishAuthorize
				 *
				 * @example d5a44dfe-673b-4666-82f9-96346107e424
				 */
				SdkTransID: string;
			};
		With3DSv2BRW: components["schemas"]["FinishAuthorize"] &
			Record<string, never> & {
				/**
				 * @description Уникальный идентификатор транзакции,генерируемый 3DS-Server, обязательный параметр для 3DS второй версии
				 *
				 * @example d7171a06-7159-4bdd-891a-a560fe9938d2
				 */
				TdsServerTransId: string;
				/**
				 * @description Идентификатор транзакции,присвоенный ACS, полученный в ответе на FinishAuthorize
				 *
				 * @example e176d5d3-2f19-40f5-8234-46d3464e0b08
				 */
				AcsTransId: string;
				/**
				 * Format: uri
				 * @description Если в ответе метода **FinishAuthorize** возвращается статус **3DS_CHECKING**,
				 *     Мерчанту необходимо сформировать запрос на URL ACS банка,
				 *     выпустившего карту (в ответе параметр `ACSUrl`) и вместе с этим перенаправить клиента на эту же страницу ACSUrl для прохождения 3DS
				 *
				 * @example https://acs.vendorcert.mirconnect.ru/mdpayacs/creq
				 */
				ACSUrl?: string;
			};
		Confirm: {
			/**
			 * @description Идентификатор терминала выдается Мерчанту Т‑Кассой
			 * @example TinkoffBankTest
			 */
			TerminalKey: string;
			/**
			 * @description Идентификатор платежа в системе Т‑Кассы
			 * @example 2304882
			 */
			PaymentId: string;
			/**
			 * @description Подпись запроса (хэш SHA-256)
			 * @example c0ad1dfc4e94ed44715c5ed0e84f8ec439695b9ac219a7a19555a075a3c3ed24
			 */
			Token: string;
			/**
			 * @description IP-адрес клиента
			 * @example 192.168.255.255
			 */
			IP?: string;
			/**
			 * @description Сумма в копейках (если не передан, используется `Amount`, переданный в методе **Init**)
			 * @example 19200
			 */
			Amount?: number;
			/** @description JSON-объект с данными чека. Обязателен, если подключена онлайн-касса */
			Receipt?:
				| components["schemas"]["Receipt_FFD_12"]
				| components["schemas"]["Receipt_FFD_105"];
			/** @description Обязательный для маркетплейсов. JSON-объект с данными Маркетплейса */
			Shops?: components["schemas"]["Shops"][];
			/**
			 * @description Способ платежа
			 *
			 * @example BNPL
			 * @enum {string}
			 */
			Route?: "TCB" | "BNPL";
			/**
			 * @description Источник платежа
			 *
			 * @example BNPL
			 * @enum {string}
			 */
			Source?: "installment" | "BNPL";
		};
		/** @description Информация по способу оплаты/деталям для платежей в рассрочку */
		Items_Params: {
			/**
			 * @description Способ платежа
			 *
			 * @example ТСВ
			 * @enum {string}
			 */
			Route?: "ACQ" | "BNPL" | "TCB" | "SBER";
			/**
			 * @description Источник платежа
			 *
			 * @example Installment
			 * @enum {string}
			 */
			Source?:
				| "BNPL"
				| "cards"
				| "Installment"
				| "MirPay"
				| "qrsbp"
				| "SberPay"
				| "TinkoffPay"
				| "YandexPay";
			/**
			 * @description Сумма выданного кредита в копейках (возвращается только в случае платежей в рассрочку)
			 *
			 * @example 100000
			 */
			CreditAmount?: number;
		};
		"Confirm-2": {
			/**
			 * @description Идентификатор терминала выдается Мерчанту Т‑Кассой
			 * @example TinkoffBankTest
			 */
			TerminalKey: string;
			/**
			 * @description Идентификатор заказа в системе Мерчанта
			 * @example 21057
			 */
			OrderId: string;
			/**
			 * @description Успешность прохождения запроса (true/false)
			 * @example true
			 */
			Success: boolean;
			/**
			 * @description Статус транзакции
			 * @example CONFIRMED
			 * @enum {string}
			 */
			Status:
				| "NEW"
				| "AUTHORIZING"
				| "AUTHORIZED"
				| "AUTH_FAIL"
				| "CANCELED"
				| "CHECKING"
				| "CHECKED"
				| "COMPLETING"
				| "COMPLETED"
				| "CONFIRMING"
				| "CONFIRMED"
				| "DEADLINE_EXPIRED"
				| "FORM_SHOWED"
				| "PARTIAL_REFUNDED"
				| "PREAUTHORIZING"
				| "PROCESSING"
				| "3DS_CHECKING"
				| "3DS_CHECKED"
				| "REVERSING"
				| "REVERSED"
				| "REFUNDING"
				| "REFUNDED"
				| "REJECTED"
				| "UNKNOWN";
			/**
			 * @description Уникальный идентификатор транзакции в системе Т‑Кассы
			 * @example 2304882
			 */
			PaymentId: string;
			/**
			 * @description Код ошибки. «0» в случае успеха
			 * @example 0
			 */
			ErrorCode: string;
			/**
			 * @description Краткое описание ошибки
			 * @example OK
			 */
			Message?: string;
			/**
			 * @description Подробное описание ошибки
			 * @example None
			 */
			Details?: string;
			/** @description Детали для платежей в рассрочку
			 *      */
			Params?: components["schemas"]["Items_Params"][];
		};
		/** @description JSON-объект с данными Маркетплейса. Обязательный для маркетплейсов */
		ShopsCancel: {
			/**
			 * @description Код магазина
			 *
			 * @example 700456
			 */
			ShopCode: string;
			/**
			 * @description Cумма в копейках, которая относится к
			 *     указанному `ShopCode`
			 *
			 * @example 10000
			 */
			Amount: number;
			/**
			 * @description Наименование товара
			 *
			 * @example Товар
			 */
			Name?: string;
		};
		Cancel: {
			/**
			 * @description Идентификатор терминала выдается Мерчанту Т‑Кассой
			 * @example TinkoffBankTest
			 */
			TerminalKey: string;
			/**
			 * @description Идентификатор платежа в системе Т‑Кассы
			 * @example 2304882
			 */
			PaymentId: string;
			/**
			 * @description Подпись запроса (хэш `SHA-256`)
			 * @example c0ad1dfc4e94ed44715c5ed0e84f8ec439695b9ac219a7a19555a075a3c3ed24
			 */
			Token: string;
			/**
			 * @description IP-адрес клиента
			 * @example 192.168.255.255
			 */
			IP?: string;
			/**
			 * @description Сумма в копейках (если не передан, используется `Amount`, переданный в методе **Init**).
			 *     В случае отмены статуса **NEW** поле `Amount`, даже если оно заполнено, игнорируется. Отмена производится на полную сумму.
			 *
			 * @example 19200
			 */
			Amount?: number;
			/** @description JSON-объект с данными чека. Обязателен, если подключена онлайн-касса <br> Данные переданные в данном запросе могут отличаться от переданных в **Init**, если отмена производится только по части товаров <br> В случае полной отмены структура чека не передается. В случае частичной отмены необходимо передавать те товары, которые нужно отменить */
			Receipt?:
				| components["schemas"]["Receipt_FFD_12"]
				| components["schemas"]["Receipt_FFD_105"];
			/** @description Обязательный для маркетплейсов. JSON обьект с данными Маркетплейса */
			Shops?: components["schemas"]["ShopsCancel"][];
			/**
			 * @description Код банка в классификации СБП, в который необходимо выполнить возврат. См. параметр `MemberId` в методе [**QrMembersList**](#tag/Oplata-cherez-SBP/paths/~1QrMembersList/post)
			 * @example 77892
			 */
			QrMemberId?: string;
			/**
			 * @description Способ платежа
			 *
			 * @example BNPL
			 * @enum {string}
			 */
			Route?: "TCB" | "BNPL";
			/**
			 * @description Источник платежа
			 *
			 * @example BNPL
			 * @enum {string}
			 */
			Source?: "installment" | "BNPL";
			/** @description Идентификатор операции на стороне мерчанта. Параметр не работает для операций по СБП. Является обязательным для операций Долями и Рассрочки
			 *     * если поле не передано или пустое (""), то запрос будет обработан без проверки ранее созданных возвратов;
			 *     * если поле заполнено, то перед проведением возврата проверяется запрос на отмену с таким ExternalRequestId;
			 *     * если такой запрос уже есть, то в ответе вернется текущее состояние платежной операции;
			 *     * если такого запроса нет, то произойдет отмена платежа.
			 *     * Для операций Долями при заполнении параметра необходимо генерировать значение в формате UUID v4
			 *     * Для операций Рассрочки при заполнении параметра необходимо генерировать значение  с типом string (ограничение 100 символов)
			 *      */
			ExternalRequestId?: string;
		};
		"Cancel-2": {
			/**
			 * @description Идентификатор терминала выдается Мерчанту Т‑Кассой
			 * @example TinkoffBankTest
			 */
			TerminalKey: string;
			/**
			 * @description Идентификатор заказа в системе Мерчанта
			 * @example 21057
			 */
			OrderId: string;
			/**
			 * @description Успешность прохождения запроса (true/false)
			 * @example true
			 */
			Success: boolean;
			/**
			 * @description Статус транзакции
			 * @example REVERSED
			 */
			Status: string;
			/**
			 * @description Сумма в копейках до операции отмены
			 * @example 13000
			 */
			OriginalAmount: number;
			/**
			 * @description Сумма в копейках после операции отмены
			 * @example 5000
			 */
			NewAmount: number;
			/**
			 * @description Уникальный идентификатор транзакции в системе Т‑Кассы
			 * @example 2304882
			 */
			PaymentId: string;
			/**
			 * @description Код ошибки. «0» в случае успеха
			 * @example 0
			 */
			ErrorCode: string;
			/**
			 * @description Краткое описание ошибки
			 * @example OK
			 */
			Message?: string;
			/**
			 * @description Подробное описание ошибки
			 * @example None
			 */
			Details?: string;
			/**
			 * @description Идентификатор операции на стороне Мерчанта
			 * @example 756478567845678436
			 */
			ExternalRequestId?: string;
		};
		Charge_FULL: {
			/**
			 * @description Идентификатор терминала. <br>
			 *     Выдается Мерчанту Т‑Кассой при заведении терминала
			 *
			 * @example TinkoffBankTest
			 */
			TerminalKey: string;
			/**
			 * @description Уникальный идентификатор транзакции в
			 *     системе Т‑Кассы
			 *
			 * @example 700001702044
			 */
			PaymentId: string;
			/**
			 * @description Идентификатор рекуррентного платежа. Значение зависимо от атрибутов:
			 *       * OperationInitiatorType в методе /init,
			 *       * Recurrent в методе /Init. <br>
			 *     Детальная информация представлена в описании [Рекуррентный платёж](#tag/Rekurrentnyj-platyozh) и [Инициализация платежа](#tag/Standartnyj-platyozh/paths/~1Init/post)
			 *
			 * @example 145919
			 */
			RebillId: string;
			/**
			 * @description Подпись запроса
			 *
			 * @example f5a3be479324a6d3a4d9efa0d02880b77d04a91758deddcbd9e752a6df97cab5
			 */
			Token: string;
			/**
			 * @description IP-адрес клиента
			 *
			 * @example 2011:0db8:85a3:0101:0101:8a2e:0370:7334
			 */
			IP?: string;
			/** @description * true — если клиент хочет получать
			 *     уведомления на почту
			 *      */
			SendEmail?: boolean;
			/**
			 * Format: email
			 * @description Адрес почты клиента
			 *     * Обязателен при передаче **SendEmail**
			 *
			 * @example customer@test.com
			 */
			InfoEmail?: string;
		};
		Charge_SDK: {
			/**
			 * @description Идентификатор терминала. <br>
			 *     Выдается Мерчанту Т‑Кассой при заведении терминала
			 *
			 * @example TinkoffBankTest
			 */
			TerminalKey: string;
			/**
			 * @description Уникальный идентификатор транзакции в
			 *     системе Т‑Кассы
			 *
			 * @example 700001702044
			 */
			PaymentId: string;
			/**
			 * @description Идентификатор рекуррентного платежа
			 *
			 * @example 145919
			 */
			RebillId: string;
			/**
			 * @description Подпись запроса
			 *
			 * @example f5a3be479324a6d3a4d9efa0d02880b77d04a91758deddcbd9e752a6df97cab5
			 */
			Token: string;
		};
		GetState_FULL: {
			/**
			 * @description Идентификатор терминала. <br>
			 *     Выдается Мерчанту Т‑Кассой при заведении терминала
			 *
			 * @example TinkoffBankTest
			 */
			TerminalKey: string;
			/**
			 * @description Идентификатор платежа в системе Т‑Кассы
			 *
			 * @example 13660
			 */
			PaymentId: string;
			/**
			 * @description Подпись запроса
			 *
			 * @example 7241ac8307f349afb7bb9dda760717721bbb45950b97c67289f23d8c69cc7b96
			 */
			Token: string;
			/**
			 * @description IP-адрес клиента
			 *
			 * @example 192.168.0.52
			 */
			IP?: string;
		};
		GetState_SDK: {
			/**
			 * @description Идентификатор терминала. <br>
			 *     Выдается Мерчанту Т‑Кассой при заведении терминала
			 *
			 * @example TinkoffBankTest
			 */
			TerminalKey: string;
			/**
			 * @description Идентификатор платежа в системе Т‑Кассы
			 *
			 * @example 13660
			 */
			PaymentId: string;
			/**
			 * @description Подпись запроса
			 *
			 * @example 7241ac8307f349afb7bb9dda760717721bbb45950b97c67289f23d8c69cc7b96
			 */
			Token: string;
		};
		AddCustomer: {
			/**
			 * @description Идентификатор терминала, выдается Мерчанту Т‑Кассой
			 * @example TinkoffBankTest
			 */
			TerminalKey: string;
			/**
			 * @description Идентификатор клиента в системе Мерчанта
			 * @example 4387c647-a693-449d-bc35-91faecfc50de
			 */
			CustomerKey: string;
			/**
			 * @description Подпись запроса
			 * @example 30797e66108934dfa3d841b856fdad227c6b9c46d6a39296e02dc800d86d181e
			 */
			Token: string;
			/**
			 * @description IP-адрес запроса
			 * @example 10.100.10.10
			 */
			IP?: string;
			/**
			 * Format: email
			 * @description Email клиента
			 * @example username@test.ru
			 */
			Email?: string;
			/**
			 * @description Телефон клиента в формате +{Ц}
			 *
			 * @example +79031234567
			 */
			Phone?: string;
		};
		AddCustomerResponse: {
			/**
			 * @description Идентификатор терминала, выдается Продавцу Т‑Кассой
			 * @example TinkoffBankTest
			 */
			TerminalKey: string;
			/**
			 * @description Идентификатор клиента в системе Мерчанта
			 * @example 05d65baa-9718-445e-8212-76fa0dd4c1d2
			 */
			CustomerKey: string;
			/**
			 * @description Код ошибки. «0» в случае успеха
			 *
			 * @example 0
			 */
			ErrorCode: string;
			/**
			 * @description Успешность прохождения запроса (true/false)
			 *
			 * @example true
			 */
			Success: boolean;
			/**
			 * @description Краткое описание ошибки
			 *
			 * @example Неверные параметры
			 */
			Message?: string;
			/**
			 * @description Подробное описание ошибки
			 *
			 * @example Терминал не найден
			 */
			Details?: string;
		};
		GetOrRemoveCustomer: {
			/**
			 * @description Идентификатор терминала, выдается Мерчанту Т‑Кассой
			 * @example TinkoffBankTest
			 */
			TerminalKey: string;
			/** @description Идентификатор клиента в системе Мерчанта */
			CustomerKey: string;
			/**
			 * @description Подпись запроса
			 * @example 30797e66108934dfa3d841b856fdad227c6b9c46d6a39296e02dc800d86d181e
			 */
			Token: string;
			/** @description IP-адрес запроса */
			IP?: string;
		};
		GetCustomerResponse: {
			/**
			 * @description Идентификатор терминала, выдается Мерчанту Т‑Кассой
			 * @example TinkoffBankTest
			 */
			TerminalKey: string;
			/**
			 * @description Идентификатор клиента в системе Мерчанта
			 * @example 4264aa7b-08ab-4429-ab5a-2a171d841ced
			 */
			CustomerKey: string;
			/**
			 * @description Код ошибки. «0» в случае успеха
			 *
			 * @example 0
			 */
			ErrorCode: string;
			/**
			 * @description Успешность прохождения запроса (true/false)
			 *
			 * @example true
			 */
			Success: boolean;
			/**
			 * @description Краткое описание ошибки
			 *
			 * @example Неверный статус клиента
			 */
			Message?: string;
			/**
			 * @description Подробное описание ошибки
			 *
			 * @example Клиент не найден.
			 */
			Details?: string;
			/**
			 * Format: email
			 * @description Email клиента
			 * @example a@test.ru
			 */
			Email?: string;
			/**
			 * @description Телефон клиента в формате +{Ц}
			 *
			 * @example +79031234567
			 */
			Phone?: string;
		};
		RemoveCustomerResponse: {
			/**
			 * @description Идентификатор терминала, выдается Мерчанту Т‑Кассой
			 * @example TinkoffBankTest
			 */
			TerminalKey: string;
			/** @description Идентификатор клиента в системе Мерчанта */
			CustomerKey: string;
			/**
			 * @description Код ошибки. «0» в случае успеха
			 *
			 * @example 0
			 */
			ErrorCode: string;
			/**
			 * @description Успешность прохождения запроса (true/false)
			 *
			 * @example true
			 */
			Success: boolean;
			/**
			 * @description Краткое описание ошибки
			 *
			 * @example Неверные параметры
			 */
			Message?: string;
			/** @description Подробное описание ошибки
			 *      */
			Details?: string;
		};
		AddCard_FULL: {
			/**
			 * @description Идентификатор терминала, выдается Мерчанту Т‑Кассой
			 *
			 * @example 1111133333
			 */
			TerminalKey: string;
			/**
			 * @description Идентификатор клиента в системе Мерчанта
			 *
			 * @example testCustomer1234
			 */
			CustomerKey: string;
			/**
			 * @description Подпись запроса
			 *
			 * @example 30797e66108934dfa3d841b856fdad227c6b9c46d6a39296e02dc800d86d181e
			 */
			Token: string;
			/**
			 * @description Если CheckType не передается, автоматически проставляется значение NO.
			 *      Возможные значения:
			 *      * NO — сохранить карту без проверок. `RebillID` для рекуррентных платежей не возвращается;
			 *      * HOLD — при сохранении сделать списание на 0 руб. `RebillID` возвращается для терминалов без
			 *      поддержки 3DS;
			 *      * 3DS — при сохранении карты выполнить проверку 3DS и выполнить списание на 0 р. В этом случае `RebillID` будет только для 3DS карт. Карты, не
			 *      поддерживающие 3DS, привязаны не будут;
			 *      * 3DSHOLD – при привязке карты выполнить проверку, поддерживает карта 3DS или нет. Если карта не поддерживает 3DS, то выполняется
			 *      списание на 0 руб.
			 *
			 * @enum {string}
			 */
			CheckType?: "NO" | "HOLD" | "3DS" | "3DSHOLD";
			/**
			 * @description IP-адрес запроса
			 *
			 * @example 10.100.10.10
			 */
			IP?: string;
			/** @description Признак резидентности добавляемой карты:
			 *     Возможные значения:
			 *     * true — Карта РФ,
			 *     * false — Карта не РФ,
			 *     * null — не специфицируется (универсальная карта).
			 *      */
			ResidentState?: boolean;
		};
		AddCard_SDK: {
			/**
			 * @description Идентификатор терминала, выдается Мерчанту Т‑Кассой
			 *
			 * @example 1241421414
			 */
			TerminalKey: string;
			/**
			 * @description Идентификатор клиента в системе Мерчанта
			 *
			 * @example testCustomer1234
			 */
			CustomerKey: string;
			/**
			 * @description Подпись запроса
			 *
			 * @example 30797e66108934dfa3d841b856fdad227c6b9c46d6a39296e02dc800d86d181e
			 */
			Token: string;
			/**
			 * @description Возможные значения:
			 *     * NO – сохранить карту без проверок. Rebill ID для
			 *     рекуррентных платежей не возвращается;
			 *     * HOLD – при сохранении сделать списание на 0
			 *     руб. RebillID возвращается для терминалов без
			 *     поддержки 3DS;
			 *     * 3DS – при сохранении карты выполнить проверку
			 *     3DS и выполнить списание на 0 р. В этом случае
			 *     RebillID будет только для 3DS карт. Карты, не
			 *     поддерживающие 3DS, привязаны не будут;
			 *     * 3DSHOLD – при привязке карты выполнить
			 *     проверку, поддерживает карта 3DS или нет. Если карта не поддерживает 3DS, то выполняется
			 *     списание на 0р.
			 *
			 * @enum {string}
			 */
			CheckType?: "NO" | "HOLD" | "3DS" | "3DSHOLD";
		};
		AddCardResponse_FULL: {
			/**
			 * @description Идентификатор платежа в системе Т‑Кассы
			 *
			 * @example 6155312072
			 */
			PaymentId: string;
			/**
			 * @description Идентификатор терминала. Выдается Мерчанту Т‑Кассой
			 *     при заведении терминала
			 *
			 * @example TinkoffBankTest
			 */
			TerminalKey: string;
			/**
			 * @description Идентификатор клиента в системе Мерчанта
			 *
			 * @example 906540
			 */
			CustomerKey: string;
			/**
			 * @description Идентификатор запроса на привязку карты
			 *
			 * @example ed989549-d3be-4758-95c7-22647e03f9ec
			 */
			RequestKey: string;
			/**
			 * @description Код ошибки. «0» в случае успеха
			 *
			 * @example 0
			 */
			ErrorCode: string;
			/**
			 * @description Успешность прохождения запроса (true/false)
			 *
			 * @example true
			 */
			Success: boolean;
			/**
			 * @description Краткое описание ошибки
			 *
			 * @example Неверные параметры
			 */
			Message?: string;
			/**
			 * @description Подробное описание ошибки
			 *
			 * @example Терминал не найден
			 */
			Details?: string;
			/**
			 * Format: uri
			 * @description UUID, используется для работы без PCI DSS
			 *
			 * @example 82a31a62-6067-4ad8-b379-04bf13e37642d
			 */
			PaymentURL: string;
		};
		AddCardResponse_SDK: {
			/**
			 * @description Идентификатор платежа в системе Т‑Кассы
			 *
			 * @example 6155312073
			 */
			PaymentId: string;
			/**
			 * @description Идентификатор терминала. Выдается Мерчанту Т‑Кассой
			 *     при заведении терминала
			 *
			 * @example TinkoffBankTest
			 */
			TerminalKey: string;
			/**
			 * @description Идентификатор клиента в системе Мерчанта
			 *
			 * @example 906540
			 */
			CustomerKey: string;
			/**
			 * @description Идентификатор запроса на привязку карты
			 *
			 * @example ed989549-d3be-4758-95c7-22647e03f9ec
			 */
			RequestKey: string;
			/**
			 * @description Код ошибки. «0» в случае успеха
			 *
			 * @example 0
			 */
			ErrorCode: string;
			/**
			 * @description Успешность прохождения запроса (true/false)
			 *
			 * @example true
			 */
			Success: boolean;
			/**
			 * @description Краткое описание ошибки
			 *
			 * @example Неверные параметры
			 */
			Message?: string;
			/**
			 * @description Подробное описание ошибки
			 *
			 * @example Терминал не найден
			 */
			Details?: string;
		};
		AttachCard: {
			/**
			 * @description Идентификатор терминала. Выдается Мерчанту Т‑Кассой
			 *     при заведении терминала
			 *
			 * @example TinkoffBankTest
			 */
			TerminalKey: string;
			/**
			 * Format: uuid
			 * @description Идентификатор запроса на привязку карты
			 *
			 * @example 13021e10-a3ed-4f14-bcd1-823b5ac37390
			 */
			RequestKey: string;
			/**
			 * @description Зашифрованные данные карты в формате:
			 *     PAN=4300000000000777;ExpDate=0519;CardHolder=IVAN PETROV;CVV=111
			 *
			 * @example U5jDbwqOVx+2vDApxe/rfACMt+rfWXzPdJ8ZXxNFVIiZaLZrOW72bGe9cKZdIDnekW0nqm88YxRD↵jyfa5Ru0kY5cQV alU+juS1u1zpamSDtaGFeb8sRZfhj72yGw+io+qHGSBeorcfgoKStyKGuBPWfG↵d0PLHuyBE6QgZyIAM1XfdmNlV0UAxOnkTGDsskL pIt3AWhw2e8KOar0vwbgCTDjznDB1/DLgOW01↵Aj/bXyLJoG1BkOrPBm9JURs+f+uyFae0hkRicNKNgXoN5pJTSQxOEauOi6ylsVJ B3WK5MNYXtj6x↵GlxcmTk/LD9kvHcjTeojcAlDzRZ87GdWeY8wgg==
			 */
			CardData: string;
			/** @description В объекте передаются дополнительные параметры в формате `Ключ`:`Значение` с разделителем `|`,
			 *     например, меняем на JSON объект, содержащий дополнительные параметры в виде `Ключ`:`Значение`
			 *
			 *     Если ключи или значения содержат в себе специальные символы, то получившееся значение должно быть закодировано
			 *     функцией urlencode. Максимальная длина для каждого передаваемого параметра:
			 *     * Ключ — 20 знаков,
			 *     * Значение — 100 знаков.
			 *
			 *     Максимальное количество пар «ключ-значение» не может превышать 20
			 *
			 *     >**ВАЖНО!** Для 3DS второй версии в DATA необходимо передавать параметры, описанные в объекте
			 *     3DSv2. В HttpHeaders запроса обязательны заголовки: `User-Agent` и `Accept`
			 *      */
			DATA?:
				| {
						[key: string]: string | undefined;
				  }
				| components["schemas"]["3DSv2"];
			/**
			 * @description Подпись запроса
			 *
			 * @example 7241ac8307f349afb7bb9dda760717721bbb45950b97c67289f23d8c69cc7b96
			 */
			Token: string;
		};
		AttachCardResponse: {
			/**
			 * @description Платежный ключ, выдается Мерчанту при заведении
			 *     терминала
			 *
			 * @example testRegress
			 */
			TerminalKey: string;
			/**
			 * @description Идентификатор клиента в системе Мерчанта
			 *
			 * @example testCustomerKey
			 */
			CustomerKey: string;
			/**
			 * Format: uuid
			 * @description Идентификатор запроса на привязку карты
			 *
			 * @example 8de92934-26c9-474c-a4ce-424f2021d24d
			 */
			RequestKey: string;
			/**
			 * @description Идентификатор карты в системе Т‑Кассы
			 *
			 * @example 5555
			 */
			CardId: string;
			/**
			 * @description Успешность прохождения запроса (true/false)
			 *
			 * @example true
			 */
			Success: boolean;
			/**
			 * @description Код ошибки. «0» в случае успеха
			 *
			 * @example 0
			 */
			ErrorCode: string;
			/**
			 * @description Статус привязки карты:
			 *     * NEW — новая сессия привязки карты;
			 *     * FORM_SHOWED — показ формы привязки карты;
			 *     * 3DS_CHECKING — отправка клиента на проверку 3DS;
			 *     * 3DS_CHECKED — клиент успешно прошел проверку 3DS;
			 *     * AUTHORIZING — отправка платежа на 0 руб;
			 *     * AUTHORIZED — платеж на 0 руб прошел успешно;
			 *     * COMPLETED — карта успешно привязана;
			 *     * REJECTED — привязать карту не удалось.
			 *
			 * @enum {string}
			 */
			Status?:
				| "NEW"
				| "FORM_SHOWED"
				| "3DS_CHECKING"
				| "3DS_CHECKED"
				| "AUTHORIZING"
				| "AUTHORIZED"
				| "COMPLETED"
				| "REJECTED";
			/**
			 * @description Идентификатор рекуррентного платежа
			 *
			 * @example 130799909
			 */
			RebillId?: string;
			/**
			 * @description Краткое описание ошибки
			 *
			 * @example Неверные параметры
			 */
			Message?: string;
			/** @description Подробное описание ошибки
			 *      */
			Details?: string;
			/**
			 * Format: uri
			 * @description Адрес сервера управления доступом, для проверки 3DS
			 *     (возвращается в ответе на статус 3DS_CHECKING)
			 *
			 * @example https://secure.tcsbank.ru/acs/auth/start.do
			 */
			ACSUrl?: string;
			/**
			 * @description Уникальный идентификатор транзакции в системе
			 *     Т‑Кассы (возвращается в ответе на статус 3DS_CHECKING)
			 *
			 * @example ACQT-563587431
			 */
			MD?: string;
			/**
			 * @description Результат аутентификации 3-D Secure (возвращается в ответе на статус 3DS_CHECKING)
			 *
			 * @example eJxVUl1TwjAQ/CtM30s+KLTDHGHQwsiogFh09C2kp1RpC2nLh7/eBAtqnnYvN3ubvUD/kK4bO9RFkmc9hzWp08BM5XGSvfecRT RyA6cvIFppxPARVaVRwD0WhXzHRhL3HMUU73itwKVtyl1Pcs8Nli3pymUQK+z2Sww6joDZYI5bAfUgYeY0OZAzNYparWRWCpBqe zWeiDZnLe3BqSmkqMeh4PRy2p02BfJThkymKCIsSiAnCCqvslIfhXEG5Eyg0muxKstN0SVkv983yyT7zN/emroiQOwlkF8js8qiwogdk lg8rEfT5WK0jj6G7D4cepNo8TWNBmwSDXtAbAfEskTjkPk0oF6DeV3a6jLj8VQHmVoXglFTqTFs7IjBn4u/BTBZa7OK8yPODPCwyT M0HSbACwby6/f6xsaoSpNMMN89+uHdV/iUPz2nyat/uxrPXz5nuX/c2nBPTVYxMflwzthJ0hIgVobUeyP1yg469xW+AedOuuM=
			 */
			PaReq?: string;
		};
		GetAddCardState: {
			/**
			 * @description Идентификатор терминала, выдается Мерчанту Т‑Кассой
			 *
			 * @example testRegressBank
			 */
			TerminalKey: string;
			/**
			 * @description Идентификатор запроса на привязку карты
			 *
			 * @example 13021e10-a3ed-4f14-bcd1-823b5ac37390
			 */
			RequestKey: string;
			/**
			 * @description Подпись запроса
			 *
			 * @example 30797e66108934dfa3d841b856fdad227c6b9c46d6a39296e02dc800d86d181e
			 */
			Token: string;
		};
		GetAddCardStateResponse: {
			/**
			 * @description Идентификатор терминала. Выдается Мерчанту Т‑Кассой
			 *     при заведении терминала
			 *
			 * @example TinkoffBankTest
			 */
			TerminalKey: string;
			/**
			 * @description Идентификатор запроса на привязку карты
			 *
			 * @example 13021e10-a3ed-4f14-bcd1-823b5ac37390
			 */
			RequestKey: string;
			/**
			 * @description Статус привязки карты:
			 *     * NEW — новая сессия привязки карты,
			 *     * FORM_SHOWED — показ формы привязки карты,
			 *     * 3DS_CHECKING — отправка клиента на проверку 3DS;
			 *     * 3DS_CHECKED — клиент успешно прошел проверку 3DS;
			 *     * AUTHORIZING — отправка платежа на 0 руб;
			 *     * AUTHORIZED — платеж на 0 руб прошел успешно;
			 *     * COMPLETED — карта успешно привязана,
			 *     * REJECTED — привязать карту не удалось.
			 *
			 * @enum {string}
			 */
			Status:
				| "NEW"
				| "FORM_SHOWED"
				| "3DS_CHECKING"
				| "3DS_CHECKED"
				| "AUTHORIZING"
				| "AUTHORIZED"
				| "COMPLETED"
				| "REJECTED";
			/**
			 * @description Успешность прохождения запроса (true/false)
			 *
			 * @example true
			 */
			Success: boolean;
			/**
			 * @description Идентификатор карты в системе Т‑Кассы
			 *
			 * @example 156516516
			 */
			CardId?: string;
			/**
			 * @description Идентификатор рекуррентного платежа
			 *
			 * @example 134249124
			 */
			RebillId?: string;
			/**
			 * @description Код ошибки. «0» в случае успеха
			 *
			 * @example 0
			 */
			ErrorCode?: string;
			/**
			 * @description Краткое описание ошибки
			 *
			 * @example Неверные параметры
			 */
			Message?: string;
			/**
			 * @description Подробное описание ошибки
			 *
			 * @example Данный RequestKey не найден.
			 */
			Details?: string;
			/**
			 * @description Идентификатор клиента в системе Мерчанта
			 *
			 * @example testCustomer1234
			 */
			CustomerKey?: string;
		};
		GetCardList_FULL: {
			/**
			 * @description Идентификатор терминала, выдается Мерчанту Т‑Кассой
			 *
			 * @example testRegressBank
			 */
			TerminalKey: string;
			/**
			 * @description Идентификатор клиента в системе Мерчанта
			 *
			 * @example testCustomer1234
			 */
			CustomerKey: string;
			/**
			 * @description Признак сохранения карты для оплаты в 1 клик
			 *
			 * @example true
			 */
			SavedCard?: boolean;
			/**
			 * @description Подпись запроса
			 *
			 * @example 30797e66108934dfa3d841b856fdad227c6b9c46d6a39296e02dc800d86d181e
			 */
			Token: string;
			/**
			 * @description IP-адрес запроса
			 *
			 * @example 2011:0db8:85a3:0101:0101:8a2e:0370:7334
			 */
			IP?: string;
		};
		GetCardList_SDK: {
			/**
			 * @description Идентификатор терминала, выдается Мерчанту Т‑Кассой
			 *
			 * @example testRegressBank
			 */
			TerminalKey: string;
			/**
			 * @description Идентификатор клиента в системе Мерчанта
			 *
			 * @example testCustomer1234
			 */
			CustomerKey: string;
			/**
			 * @description Признак сохранения карты для оплаты в 1 клик
			 *
			 * @example true
			 */
			SavedCard?: boolean;
			/**
			 * @description Подпись запроса
			 *
			 * @example 30797e66108934dfa3d841b856fdad227c6b9c46d6a39296e02dc800d86d181e
			 */
			Token: string;
		};
		RemoveCard: {
			/**
			 * @description Идентификатор терминала, выдается Мерчанту Т‑Кассой
			 *
			 * @example testRegressBank
			 */
			TerminalKey: string;
			/**
			 * @description Идентификатор клиента в системе Мерчанта
			 *
			 * @example testCustomer1234
			 */
			CustomerKey: string;
			/**
			 * @description Идентификатор карты в системе Т‑Кассы
			 *
			 * @example 156516516
			 */
			CardId: string;
			/**
			 * @description Подпись запроса
			 *
			 * @example 30797e66108934dfa3d841b856fdad227c6b9c46d6a39296e02dc800d86d181e
			 */
			Token: string;
			/**
			 * @description IP-адрес запроса
			 *
			 * @example 2011:0db8:85a3:0101:0101:8a2e:0370:7334
			 */
			IP?: string;
		};
		RemoveCardResponse: {
			/**
			 * @description Идентификатор терминала. Выдается Мерчанту Т‑Кассой
			 *     при заведении терминала
			 *
			 * @example TinkoffBankTest
			 */
			TerminalKey: string;
			/**
			 * @description Статус карты: D — удалена
			 *
			 * @example D
			 */
			Status: string;
			/**
			 * @description Идентификатор клиента в системе Мерчанта
			 *
			 * @example testCustomer1234
			 */
			CustomerKey: string;
			/**
			 * @description Идентификатор карты в системе Т‑Кассы
			 *
			 * @example 156516516
			 */
			CardId: string;
			/**
			 * @description Тип карты:
			 *     * карта списания (0),
			 *     * карта пополнения(1),
			 *     * карта пополнения и списания (2).
			 *
			 * @example 0
			 * @enum {number}
			 */
			CardType: 0 | 1 | 2;
			/**
			 * @description Успешность прохождения запроса (true/false)
			 *
			 * @example true
			 */
			Success: boolean;
			/**
			 * @description Код ошибки. «0» в случае успеха
			 *
			 * @example 0
			 */
			ErrorCode: string;
			/**
			 * @description Краткое описание ошибки
			 *
			 * @example Неверные параметры
			 */
			Message?: string;
			/**
			 * @description Подробное описание ошибки
			 *
			 * @example Не удалось удалить карту клиента, для данного клиента такая карта не существует
			 */
			Details?: string;
		};
		GetQr: {
			/**
			 * @description Идентификатор терминала, выдается Мерчанту Т‑Кассой
			 *
			 * @example TinkoffBankTest
			 */
			TerminalKey: string;
			/**
			 * @description Уникальный идентификатор транзакции в системе Т‑Кассы. Запрос будет работать даже если указать значение в "string" формате
			 *
			 * @example 10063
			 */
			PaymentId: number;
			/**
			 * @description Тип возвращаемых данных:
			 *     * PAYLOAD – В ответе возвращается только Payload (по-умолчанию);
			 *     * IMAGE – В ответе возвращается SVG изображение QR.
			 *
			 * @default PAYLOAD
			 * @example PAYLOAD
			 * @enum {string}
			 */
			DataType: "PAYLOAD" | "IMAGE";
			/**
			 * @description Подпись запроса
			 * @example 871199b37f207f0c4f721a37cdcc71dfcea880b4a4b85e3cf852c5dc1e99a8d6
			 */
			Token: string;
		};
		QrResponse_FULL: {
			/**
			 * @description Идентификатор терминала. Выдается Мерчанту Т‑Кассой
			 *     при заведении терминала
			 *
			 * @example TinkoffBankTest
			 */
			TerminalKey: string;
			/**
			 * @description Номер заказа в системе Мерчанта
			 *
			 * @example 21057
			 */
			OrderId: string;
			/**
			 * @description Успешность прохождения запроса (true/false)
			 *
			 * @example true
			 */
			Success: boolean;
			/**
			 * @description В зависимости от параметра DataType в запросе это:
			 *       * Payload — информация, которая должна быть закодирована в QR;
			 *       * SVG изображение QR в котором уже закодирован Payload.
			 *
			 * @example https://qr.nspk.ru/AS1000670LSS7DN18SJQDNP4B05KLJL2?type=01&bank=100000000001&sum=10000&cur=RUB&crc=C08B
			 */
			Data: string;
			/**
			 * @description Уникальный идентификатор транзакции в системе Т‑Кассы
			 *
			 * @example 10063
			 */
			PaymentId: string;
			/**
			 * @description Код ошибки. «0» в случае успеха
			 *
			 * @example 0
			 */
			ErrorCode: string;
			/**
			 * @description Краткое описание ошибки
			 *
			 * @example Неверные параметры
			 */
			Message?: string;
			/**
			 * @description Подробное описание ошибки
			 *
			 * @example Подробное описание ошибки
			 */
			Details?: string;
			/**
			 * @description Идентификатор запроса на привязку счета. Передается в случае привязки и одновременной оплаты по CБП
			 *
			 * @example Идентификатор запроса
			 */
			RequestKey: string;
		};
		QrResponse_SDK: {
			/**
			 * @description Идентификатор терминала. Выдается Мерчанту Т‑Кассой
			 *     при заведении терминала
			 *
			 * @example TinkoffBankTest
			 */
			TerminalKey: string;
			/**
			 * @description Номер заказа в системе Мерчанта
			 *
			 * @example 21057
			 */
			OrderId: string;
			/**
			 * @description Успешность прохождения запроса (true/false)
			 *
			 * @example true
			 */
			Success: boolean;
			/**
			 * @description В зависимости от параметра DataType в запросе это:
			 *       * Payload — информация, которая должна быть закодирована в QR;
			 *       * SVG изображение QR в котором уже закодирован Payload.
			 *
			 * @example https://qr.nspk.ru/AS1000670LSS7DN18SJQDNP4B05KLJL2?type=01&bank=100000000001&sum=10000&cur=RUB&crc=C08B
			 */
			Data: string;
			/**
			 * @description Уникальный идентификатор транзакции в системе Т‑Кассы
			 *
			 * @example 10063
			 */
			PaymentId: string;
			/**
			 * @description Код ошибки. «0» в случае успеха
			 *
			 * @example 0
			 */
			ErrorCode: string;
			/**
			 * @description Краткое описание ошибки
			 *
			 * @example Неверные параметры
			 */
			Message?: string;
			/**
			 * @description Подробное описание ошибки
			 *
			 * @example Подробное описание ошибки
			 */
			Details?: string;
			/**
			 * @description Идентификатор запроса на привязку счета. Передается в случае привязки и одновременной оплаты по CБП
			 *
			 * @example Идентификатор запроса
			 */
			RequestKey: string;
		};
		EventData: {
			/** @description Идентификатор сессии T‑Pay */
			SessionId?: string;
			/** @description Тип события */
			Type?: string;
			/** @description Aвторизационный токен пользователя */
			AccessToken?: string;
			/** @description Идентификатор счета оплаты */
			AccountId?: string;
			/** @description Идентификатор события */
			EventSessionId?: string;
		};
		"T-PayEvent": {
			/** @description Идентификатор терминала. <br> Выдается Мерчанту Т‑Кассой при заведении терминала */
			TerminalKey: string;
			/** @description Данные события. Объект EventData собирается в виде списка «ключ=значение» (разделитель «;»), зашифровывается открытым ключом (X509 RSA 2048), получившееся бинарное значение кодируется в Base64. Открытый ключ генерируется Банком и выдается при регистрации терминала. Все поля обязательны. */
			EventData: components["schemas"]["EventData"];
			/** @description Идентификатор платежа */
			PaymentId?: string;
			/** @description Подпись запроса */
			Token: string;
		};
		Member: {
			/**
			 * @description Идентификатор участника
			 *
			 * @example 1000000
			 */
			MemberId: string;
			/**
			 * @description Наименование участника
			 *
			 * @example T-Банк
			 */
			MemberName: string;
			/**
			 * @description * true — если данный участник был получателем
			 *     указанного платежа,
			 *     * false — в противном случае.
			 *
			 * @example true
			 */
			IsPayee: boolean;
		};
		AddAccountQr: {
			/**
			 * @description Идентификатор терминала, выдается Мерчанту Т‑Кассой
			 *
			 * @example TinkoffBankTest
			 */
			TerminalKey: string;
			/** @description Подробное описание деталей заказа */
			Description: string;
			/**
			 * @description Тип возвращаемых данных:
			 *     * PAYLOAD — в ответе возвращается только Payload
			 *     (по-умолчанию);
			 *     * IMAGE — в ответе возвращается SVG изображение QRя
			 *
			 * @default PAYLOAD
			 * @example PAYLOAD
			 * @enum {string}
			 */
			DataType: "PAYLOAD" | "IMAGE";
			/** @description JSON объект, содержащий
			 *     дополнительные параметры в виде `ключ`:`значение`. Данные параметры будут
			 *     переданы на страницу оплаты (в случае ее
			 *     кастомизации). Максимальная длина для
			 *     каждого передаваемого параметра:
			 *       * Ключ — 20 знаков,
			 *       * Значение — 100 знаков.<br>
			 *     Максимальное количество пар `ключ`:`значение` не может превышать 20
			 *      */
			Data?: {
				[key: string]: string | undefined;
			};
			/**
			 * Format: datatime
			 * @description Cрок жизни ссылки или динамического QR-кода СБП (если выбран данный способ
			 *     оплаты). В случае, если параметр `RedirectDueDate` не был передан, проверяется настроечный параметр
			 *     платежного терминала `REDIRECT_TIMEOUT`, который может содержать значение срока жизни ссылки в
			 *     часах. Если его значение больше нуля, то оно будет установлено в качестве срока жизни ссылки или
			 *     динамического QR-кода. Иначе, устанавливается значение «по умолчанию» — 1440 мин (1 сутки).
			 *
			 *     Если текущая дата превышает дату, переданную в данном параметре, ссылка для оплаты или возможность
			 *     платежа по QR-коду становятся недоступными и платёж выполнить нельзя.
			 *     Максимальное значение: 90 дней от текущей даты.
			 *     Минимальное значение: 1 минута от текущей даты.
			 *     Формат даты: YYYY-MM-DDTHH24:MI:SS+GMT.
			 *
			 * @example 2016-08-31T12:28:00+03:00
			 */
			RedirectDueDate?: string;
			/**
			 * @description Подпись запроса
			 * @example 871199b37f207f0c4f721a37cdcc71dfcea880b4a4b85e3cf852c5dc1e99a8d6
			 */
			Token: string;
		};
		AddAccountQrResponse: {
			/**
			 * @description Идентификатор терминала, выдается Мерчанту
			 *     Т‑Кассой
			 *
			 * @example TinkoffBankTest
			 */
			TerminalKey: string;
			/**
			 * @description В зависимости от параметра DataType в запросе это:
			 *       * Payload — информация, которая должна быть закодирована в QR;
			 *       * SVG изображение QR в котором уже закодирован Payload.
			 *
			 * @example https://qr.nspk.ru/AS1000670LSS7DN18SJQDNP4B05KLJL2?type=01&bank=100000000001&sum=10000&cur=RUB&crc=C08B
			 */
			Data: string;
			/**
			 * @description Идентификатор запроса на привязку счета
			 *
			 * @example ed989549-d3be-4758-95c7-22647e03f9ec
			 */
			RequestKey: string;
			/**
			 * @description Код ошибки. «0» в случае успеха
			 *
			 * @example 0
			 */
			ErrorCode: string;
			/**
			 * @description Успешность прохождения запроса (true/false)
			 *
			 * @example true
			 */
			Success: boolean;
			/**
			 * @description Краткое описание ошибки
			 *
			 * @example OK
			 */
			Message?: string;
		};
		GetAddAccountQrState: {
			/**
			 * Format: uuid
			 * @description Идентификатор запроса на привязку счета
			 *
			 * @example 13021e10-a3ed-4f14-bcd1-823b5ac37390
			 */
			RequestKey: string;
			/**
			 * @description Идентификатор терминала. Выдается Мерчанту Т‑Кассой
			 *     при заведении терминала
			 *
			 * @example TinkoffBankTest
			 */
			TerminalKey: string;
			/**
			 * @description Подпись запроса
			 *
			 * @example 7241ac8307f349afb7bb9dda760717721bbb45950b97c67289f23d8c69cc7b96
			 */
			Token: string;
		};
		GetAddAccountQrStateResponse: {
			/**
			 * @description Платежный ключ, выдается Мерчанту при заведении
			 *     терминала
			 *
			 * @example testRegress
			 */
			TerminalKey: string;
			/**
			 * Format: uuid
			 * @description Идентификатор запроса на привязку счета
			 *
			 * @example 211258
			 */
			RequestKey: string;
			/**
			 * @description Идентификатор Банка клиента, который будет
			 *     совершать оплату по привязаному счету —
			 *     заполнен, если статус ACTIVE, INACTIVE
			 *
			 * @example 100000000004
			 */
			BankMemberId?: string;
			/**
			 * @description Наименование Банка-эмитента, заполнен если BankMemberId
			 *     передан
			 *
			 * @example T-Банк
			 */
			BankMemberName?: string;
			/**
			 * @description Идентификатор привязки счета, назначаемый Банком Плательщика
			 *
			 * @example a022254a5c3c46a7327c8a12cb5c8389
			 */
			AccountToken?: string;
			/**
			 * @description Успешность прохождения запроса (true/false)
			 *
			 * @example true
			 */
			Success: boolean;
			/**
			 * @description Статус привязки карты:
			 *     * NEW — получен запрос на привязку счета;
			 *     * PROCESSING — запрос в обработке,
			 *     * ACTIVE — привязка счета успешна,
			 *     * INACTIVE — привязка счета неуспешна/деактивирована.
			 *
			 * @example ACTIVE
			 * @enum {string}
			 */
			Status: "NEW" | "PROCESSING" | "ACTIVE" | "INACTIVE";
			/**
			 * @description Код ошибки. «0» в случае успеха
			 *
			 * @example 0
			 */
			ErrorCode: string;
			/**
			 * @description Краткое описание ошибки
			 *
			 * @example OK
			 */
			Message?: string;
		};
		GetAccountQrList: {
			/**
			 * @description Идентификатор терминала. Выдается Мерчанту Т‑Кассой
			 *     при заведении терминала
			 *
			 * @example TinkoffBankTest
			 */
			TerminalKey: string;
			/**
			 * @description Подпись запроса
			 *
			 * @example 7241ac8307f349afb7bb9dda760717721bbb45950b97c67289f23d8c69cc7b96
			 */
			Token: string;
		};
		GetAccountQrListResponse: {
			/**
			 * @description Платежный ключ, выдается Мерчанту при заведении
			 *     терминала
			 *
			 * @example testRegress
			 */
			TerminalKey: string;
			/**
			 * @description Успешность прохождения запроса (true/false)
			 *
			 * @example true
			 */
			Success: boolean;
			/**
			 * @description Код ошибки. «0» в случае успеха
			 *
			 * @example 0
			 */
			ErrorCode: string;
			/**
			 * @description Краткое описание ошибки
			 *
			 * @example OK
			 */
			Message?: string;
			/** @description Список привязанных счетов покупателя по магазину
			 *      */
			AccountTokens?: {
				/**
				 * Format: uuid
				 * @description Идентификатор запроса на привязку карты
				 *
				 * @example 8de92934-26c9-474c-a4ce-424f2021d24d
				 */
				RequestKey?: string;
				/**
				 * @description Статус привязки карты:
				 *     * NEW — получен запрос на привязку счета;
				 *     * PROCESSING — запрос в обработке,
				 *     * ACTIVE — привязка счета успешна,
				 *     * INACTIVE — привязка счета неуспешна/деактивирована.
				 *
				 * @enum {string}
				 */
				Status?: "NEW" | "PROCESSING" | "ACTIVE" | "INACTIVE";
				/**
				 * @description Идентификатор привязки счета, назначаемый Банком Плательщика
				 *
				 * @example 0b67f2cae19b41809f85d5674de30a1a
				 */
				AccountToken?: string;
				/**
				 * @description Идентификатор банка клиента (эмитент), который будет
				 *     совершать оплату по привязаному счету —
				 *     заполнен, если статус ACTIVE, INACTIVE
				 *
				 * @example 5555
				 */
				BankMemberId?: string;
				/**
				 * @description Наименование банка-эмитента, заполнен если BankMemberId
				 *     передан
				 *
				 * @example T-Банк
				 */
				BankMemberName?: string;
			};
		};
		ChargeQr: {
			/**
			 * @description Идентификатор терминала. <br>
			 *     Выдается Мерчанту Т‑Кассой при заведении терминала
			 *
			 * @example TinkoffBankTest
			 */
			TerminalKey: string;
			/**
			 * @description Уникальный идентификатор транзакции в
			 *     системе Т‑Кассы
			 *
			 * @example 700001702044
			 */
			PaymentId: string;
			/**
			 * @description Идентификатор привязки счета,
			 *     назначаемый банком-эмитентом
			 *
			 * @example 70LSS7DN18SJQRS10006DNPKLJL24B05
			 */
			AccountToken: string;
			/**
			 * @description Подпись запроса
			 *
			 * @example f5a3be479324a6d3a4d9efa0d02880b77d04a91758deddcbd9e752a6df97cab5
			 */
			Token: string;
			/**
			 * @description IP-адрес клиента
			 *
			 * @example 2011:0db8:85a3:0101:0101:8a2e:0370:7334
			 */
			IP?: string;
			/** @description * true – если клиент хочет получать
			 *     уведомления на почту
			 *      */
			SendEmail?: boolean;
			/**
			 * Format: email
			 * @description Адрес почты клиента. Обязательно, если передан параметр SendEmail = true
			 *
			 * @example customer@test.com
			 */
			InfoEmail?: string;
		};
		ChargeQrResponse: {
			/**
			 * @description Идентификатор терминала. Выдается Мерчанту Т‑Кассой
			 *     при заведении терминала
			 *
			 * @example TinkoffBankTest
			 */
			TerminalKey: string;
			/**
			 * @description Сумма в копейках
			 *
			 * @example 100000
			 */
			Amount: number;
			/**
			 * @description Идентификатор заказа в системе Мерчанта
			 *
			 * @example 21050
			 */
			OrderId: string;
			/**
			 * @description Успешность прохождения запроса (true/false)
			 *
			 * @example true
			 */
			Success: boolean;
			/**
			 * @description Статус платежа
			 *
			 *     Получает в ответе 1 из 3 статусов:
			 *     * CONFIRMED — если платеж выполнен,
			 *     * REJECTED — если платеж не выполнен,
			 *     * FORM SHOWED — если форма оплаты пока что только отображается, и клиент еще не успел провести оплату.
			 *
			 * @enum {string}
			 */
			Status?: "CONFIRMED" | "REJECTED";
			/**
			 * @description Идентификатор платежа в системе Т‑Кассы
			 *
			 * @example 13660
			 */
			PaymentId: string;
			/**
			 * @description Код ошибки.
			 *     * "0" — успешная операция,
			 *     * "3013" — рекуррентные платежи недоступны,
			 *     * "3015" — неверный статус AccountToken.
			 *
			 * @example 0
			 */
			ErrorCode: string;
			/**
			 * @description Краткое описание ошибки
			 *
			 * @example Неверные параметры
			 */
			Message?: string;
			/** @description Подробное описание ошибки
			 *      */
			Details?: string;
			/**
			 * @description Код валюты по ISO 4217
			 * @example 643
			 */
			Currency?: number;
		};
		SbpPayTest: {
			/**
			 * @description Идентификатор терминала, выдается Мерчанту Т‑Кассой
			 *
			 * @example TinkoffBankTest
			 */
			TerminalKey: string;
			/**
			 * @description Идентификатор платежа в системе Т‑Кассы
			 *
			 * @example 13660
			 */
			PaymentId: string;
			/**
			 * @description Подпись запроса
			 *
			 * @example 7241ac8307f349afb7bb9dda760717721bbb45950b97c67289f23d8c69cc7b96
			 */
			Token: string;
			/**
			 * @description Признак эмуляции отказа проведения платежа Банком по таймауту. По умолчанию не используется (эмуляция не требуется)
			 *     * false — эмуляция не требуется,
			 *     * true — требуется эмуляция (не может быть использован вместе с IsRejected = true).
			 *
			 * @example true
			 */
			IsDeadlineExpired?: boolean;
			/**
			 * @description Признак эмуляции отказа Банка в проведении платежа. По умолчанию не используется (эмуляция не требуется)
			 *     * false — эмуляция не требуется,
			 *     * true — требуется эмуляция (не может быть использован вместе с IsDeadlineExpired = true).
			 *
			 * @example false
			 */
			IsRejected?: boolean;
		};
		SbpPayTestResponse: {
			/**
			 * @description Успешность прохождения запроса (true/false)
			 *
			 * @example true
			 */
			Success: boolean;
			/**
			 * @description Код ошибки. «0» в случае успеха
			 *
			 * @example 0
			 */
			ErrorCode: string;
			/**
			 * @description Краткое описание ошибки
			 *
			 * @example OK
			 */
			Message: string;
			/**
			 * @description Подробное описание ошибки
			 *
			 * @example 0
			 */
			Details: string;
		};
		GetQRStateResponse_FULL: {
			/**
			 * @description Успешность прохождения запроса (true/false)
			 *
			 * @example true
			 * @enum {boolean}
			 */
			Success: true | false;
			/**
			 * @description Код ошибки. «0» в случае успеха
			 *
			 * @example 0
			 */
			ErrorCode: string;
			/**
			 * @description Статус платежа <br>
			 *     Обязателен, если не произошло ошибки при получении статуса
			 *
			 * @example CONFIRMED
			 */
			Status?: string;
			/**
			 * @description Код ошибки возврата, полученный от СБП
			 *
			 * @example I05043
			 */
			QrCancelCode?: string;
			/**
			 * @description Дополнительное описание ошибки, прозошедшей при возврате по QR
			 *
			 * @example У клиента нет расчетного счета в этом банке. Попробуйте вернуть деньги на счет этого клиента в другом банке
			 */
			QrCancelMessage?: string;
			/**
			 * @description Номер заказа в системе Мерчанта
			 *
			 * @example 7830122
			 */
			OrderId?: string;
			/**
			 * @description Сумма отмены в копейках
			 *
			 * @example 10000
			 */
			Amount?: number;
			/**
			 * @description Краткое описание ошибки, произошедшей при запросе статуса
			 *
			 * @example OK
			 */
			Message?: string;
		};
		GetQRStateResponse_SDK: {
			/**
			 * @description Успешность прохождения запроса (true/false)
			 *
			 * @example true
			 * @enum {boolean}
			 */
			Success: true | false;
			/**
			 * @description Код ошибки. «0» в случае успеха
			 *
			 * @example 0
			 */
			ErrorCode: string;
			/**
			 * @description Статус платежа <br>
			 *     Обязателен, если не произошло ошибки при получении статуса
			 *
			 * @example CONFIRMED
			 */
			Status?: string;
			/**
			 * @description Код ошибки возврата, полученный от СБП
			 *
			 * @example I05043
			 */
			QrCancelCode?: string;
			/**
			 * @description Дополнительное описание ошибки, прозошедшей при возврате по QR
			 *
			 * @example У клиента нет расчетного счета в этом банке. Попробуйте вернуть деньги на счет этого клиента в другом банке
			 */
			QrCancelMessage?: string;
			/**
			 * @description Номер заказа в системе Мерчанта
			 *
			 * @example 7830122
			 */
			OrderId?: string;
			/**
			 * @description Сумма отмены в копейках
			 *
			 * @example 10000
			 */
			Amount?: number;
			/**
			 * @description Краткое описание ошибки, произошедшей при запросе статуса
			 *
			 * @example OK
			 */
			Message?: string;
		};
		CheckOrder: {
			/**
			 * @description Идентификатор терминала выдается Мерчанту Т‑Кассой
			 * @example TinkoffBankTest
			 */
			TerminalKey: string;
			/**
			 * @description Номер заказа в системе Мерчанта <br> Не является уникальным идентификатором
			 *
			 * @example 21057
			 */
			OrderId: string;
			/**
			 * @description Подпись запроса
			 * @example 4c4c36adf9936b011879fa26f60759e7b47e57f7968283129b0ae9ac457486ab
			 */
			Token: string;
		};
		/** @description Детали */
		PaymentsCheckOrder: {
			/**
			 * @description Уникальный идентификатор транзакции в системе Т‑Кассы
			 *
			 * @example 124671934
			 */
			PaymentId: string;
			/**
			 * @description Сумма операции в копейках
			 *
			 * @example 13660
			 */
			Amount?: number;
			/**
			 * @description Статус операции
			 *
			 * @example NEW
			 */
			Status: string;
			/**
			 * @description RRN операции
			 *
			 * @example 12345678
			 */
			RRN?: string;
			/**
			 * @description Успешность прохождения запроса (true/false)
			 *
			 * @example true
			 */
			Success: string;
			/**
			 * @description Код ошибки. «0» в случае успеха
			 *
			 * @example 0
			 */
			ErrorCode: number;
			/**
			 * @description Краткое описание ошибки
			 *
			 * @example None
			 */
			Message: string;
		};
		"CheckOrder-2": {
			/**
			 * @description Идентификатор терминала выдается Мерчанту Т‑Кассой
			 * @example TinkoffBankTest
			 */
			TerminalKey: string;
			/**
			 * @description Идентификатор заказа в системе Мерчанта
			 * @example 21057
			 */
			OrderId: string;
			/**
			 * @description Успешность прохождения запроса (true/false)
			 * @example true
			 */
			Success: boolean;
			/**
			 * @description Код ошибки. «0» в случае успеха
			 * @example 0
			 */
			ErrorCode: string;
			/**
			 * @description Краткое описание ошибки
			 * @example OK
			 */
			Message?: string;
			/**
			 * @description Подробное описание ошибки
			 * @example None
			 */
			Details?: string;
			Payments: components["schemas"]["PaymentsCheckOrder"][];
		};
		SendClosingReceipt: {
			/**
			 * @description Идентификатор терминала выдается Мерчанту Т‑Кассой
			 * @example TinkoffBankTest
			 */
			TerminalKey: string;
			/**
			 * @description Идентификатор платежа в системе Т‑Кассы
			 * @example 2304882
			 */
			PaymentId: string;
			/** @description Объект с данными чека */
			Receipt:
				| components["schemas"]["Receipt_FFD_12"]
				| components["schemas"]["Receipt_FFD_105"];
			/** @description Подпись запроса */
			Token: string;
		};
		"SendClosingReceipt-2": {
			/**
			 * @description Успешность прохождения запроса (true/false)
			 * @example true
			 */
			Success: boolean;
			/**
			 * @description Код ошибки. «0» в случае успеха
			 * @example 2304882
			 */
			ErrorCode: string;
			/**
			 * @description Краткое описание ошибки
			 * @example Неверные параметры
			 */
			Message?: string;
		};
		/** @description Дополнительные параметры платежа, переданные при создании заказа. Явяляются обязательными для платежей «в Рассрочку». В ответе параметр приходит в формате <b>Data</b> (не полностью в верхнем регистре). */
		DataNotification: {
			/**
			 * @description Способ платежа
			 *
			 * @example TCB
			 * @enum {string}
			 */
			Route?: "TCB";
			/**
			 * @description Источник платежа
			 *
			 * @example Installment
			 * @enum {string}
			 */
			Source?: "Installment";
			/**
			 * @description Сумма выданного кредита в копейках
			 *
			 * @example 10000
			 */
			CreditAmount?: number;
		};
		/** @description **Нотификация о платеже**
		 *      */
		NotificationPayment: {
			/**
			 * @description Идентификатор терминала. Выдается Мерчанту Т‑Кассой
			 *     при заведении терминала
			 *
			 * @example TinkoffBankTest
			 */
			TerminalKey?: string;
			/**
			 * @description Сумма в копейках
			 *
			 * @example 100000
			 */
			Amount?: number;
			/**
			 * @description Идентификатор заказа в системе Мерчанта
			 *
			 * @example 21050
			 */
			OrderId?: string;
			/**
			 * @description Успешность прохождения запроса (true/false)
			 *
			 * @example true
			 */
			Success?: boolean;
			/** @description Статус платежа
			 *      */
			Status?: string;
			/**
			 * @description Уникальный идентификатор транзакции в системе Т‑Кассы
			 *
			 * @example 13660
			 */
			PaymentId?: string;
			/**
			 * @description Код ошибки. «0» в случае успеха
			 *
			 * @example 0
			 */
			ErrorCode?: string;
			/** @description Краткое описание ошибки
			 *      */
			Message?: string;
			/** @description Подробное описание ошибки
			 *      */
			Details?: string;
			/**
			 * @description Идентификатор автоплатежа
			 * @example 3207469334
			 */
			RebillId?: number;
			/**
			 * @description Идентификатор карты в системе Т‑Кассы
			 *
			 * @example 10452089
			 */
			CardId?: number;
			/** @description Замаскированный номер карты/Замаскированный номер телефона */
			Pan?: string;
			/**
			 * @description Срок действия карты
			 *     В формате MMYY, где YY — две последние цифры года
			 *
			 * @example 0229
			 */
			ExpDate?: string;
			/**
			 * @description Подпись запроса. Формируется по такому же принципу, как и в случае
			 *     запросов в Т‑Кассу
			 *
			 * @example 7241ac8307f349afb7bb9dda760717721bbb45950b97c67289f23d8c69cc7b96
			 */
			Token?: string;
			DATA?: components["schemas"]["DataNotification"];
		};
		/** @description **Нотификации о привязке**
		 *
		 *     Уведомления магазину о статусе выполнения метода привязки карты `AttachCard`.
		 *     После успешного выполнения метода `AttachCard` Т‑Касса отправляет POST-запрос с информацией о привязке карты. Нотификация отправляется на ресурс Мерчанта на адрес `Notification URL` синхронно и ожидает ответа в течение 10 секунд.
		 *     После получения ответа или неполучения его за заданное время сервис переадресует клиента на `Success AddCard URL` или `Fail AddCard URL` в зависимости от результата привязки карты.
		 *     В случае успешной обработки нотификации Мерчант должен вернуть ответ с телом сообщения: OK (без тегов и заглавными английскими буквами). <br>
		 *     Если тело сообщения отлично от **OK**, любая нотификация считается неуспешной, и сервис будет повторно отправлять нотификацию раз в час в течение 24 часов. Если нотификация за это время так и не доставлена, она складывается в дамп
		 *      */
		NotificationAddCard: {
			/**
			 * @description Идентификатор терминала. Выдается Мерчанту Т‑Кассой
			 *     при заведении терминала
			 *
			 * @example TinkoffBankTest
			 */
			TerminalKey?: string;
			/**
			 * @description Идентификатор клиента в системе Мерчанта
			 *
			 * @example testCustomer1234
			 */
			CustomerKey?: string;
			/**
			 * Format: uuid
			 * @description Идентификатор запроса на привязку карты
			 *
			 * @example 13021e10-a3ed-4f14-bcd1-823b5ac37390
			 */
			RequestKey?: string;
			/**
			 * @description Успешность прохождения запроса (true/false)
			 *
			 * @example true
			 */
			Success?: boolean;
			/**
			 * @description Статус привязки карты
			 *     Получает в ответе 1 из 2 статусов привязки:
			 *       * COMPLETED — при одностадийной оплате,
			 *       * REJECTED — при двухстадийной оплате.
			 *
			 * @enum {string}
			 */
			Status?: "COMPLETED" | "REJECTED";
			/**
			 * @description Идентификатор платежа в системе Т‑Кассы
			 *
			 * @example 13660
			 */
			PaymentId?: string;
			/**
			 * @description Код ошибки. «0» в случае успеха
			 *
			 * @example 0
			 */
			ErrorCode?: string;
			/**
			 * @description Идентификатор автоплатежа
			 * @example 3207469334
			 */
			RebillId?: string;
			/**
			 * @description Идентификатор карты в системе Т‑Кассы
			 *
			 * @example 10452089
			 */
			CardId?: string;
			/** @description Замаскированный номер карты */
			Pan?: string;
			/**
			 * @description Срок действия карты
			 *     В формате MMYY, где YY — две последние цифры года
			 *
			 * @example 0229
			 */
			ExpDate?: string;
			/**
			 * @description Подпись запроса. Формируется по такому же принципу, как и в случае
			 *     запросов в Т‑Кассу
			 *
			 * @example 7241ac8307f349afb7bb9dda760717721bbb45950b97c67289f23d8c69cc7b96
			 */
			Token?: string;
		};
		/** @description Объект с информацией о видах суммы платежа */
		"Receipt_FFD_12-2": {
			/** @description Версия ФФД.
			 *     Возможные значения:
			 *     * "FfdVersion": "1.2",
			 *     * "FfdVersion": "1.05".
			 *      */
			FfdVersion?: string;
			/** @description Информация по клиенту.
			 *      */
			ClientInfo?: components["schemas"]["ClientInfo"];
			/**
			 * @description Система налогообложения. Перечисление с
			 *     возможными значениями:
			 *     * "osn" - общая СН,
			 *     * "usn_income" - упрощенная СН (доходы),
			 *     * "usn_income_outcome" - упрощенная СН (доходы минус расходы),
			 *     * "envd" - единый налог на вмененный доход;
			 *     * "esn" - единый сельскохозяйственный налог,
			 *     * "patent" - патентная СН.
			 *
			 * @example osn
			 * @enum {string}
			 */
			Taxation?:
				| "osn"
				| "usn_income"
				| "usn_income_outcome"
				| "envd"
				| "esn"
				| "patent";
			/**
			 * Format: email
			 * @description Электронная почта клиента
			 *
			 * @example a@test.ru
			 */
			Email?: string;
			/**
			 * @description Телефон клиента в формате +{Ц}
			 *
			 * @example +79031234567
			 */
			Phone?: string;
			/** @description Идентификатор/Имя клиента */
			Customer?: string;
			/** @description ИНН клиента */
			CustomerInn?: string;
			/** @description Массив, содержащий в себе информацию о товарах */
			Items?: components["schemas"]["Items_FFD_12"][];
			/** @description Объект c информацией о видах суммы платежа.
			 *     * Если объект не передан, будет автоматически указана итоговая сумма чека с видом оплаты
			 *     "Безналичный";
			 *     * Если передан объект **receipt.Payments**, то значение в **Electronic** должно быть равно итоговому значению
			 *     Amount в методе `Init`. При этом сумма введенных значений по всем видам оплат, включая Electronic,
			 *     должна быть равна сумме (Amount) всех товаров, переданных в объекте **receipt.Items**.
			 *      */
			Payments?: components["schemas"]["Payments"][];
		};
		/** @description Объект с информацией о видах суммы платежа */
		"Receipt_FFD_105-2": {
			/** @description Массив позиций чека с информацией о товарах */
			Items?: components["schemas"]["Items_FFD_105"][];
			/**
			 * @description Версия ФФД.
			 *     Возможные значения:
			 *     * "FfdVersion": "1.2",
			 *     * "FfdVersion": "1.05".
			 *     По умолчанию версия ФФД - 1.05
			 *
			 * @default 1.05
			 */
			FfdVersion: string;
			/**
			 * Format: email
			 * @description Электронная почта клиента.
			 *     Атрибут должен быть заполнен, если не передано значение
			 *     в атрибуте “Phone”
			 *
			 * @example a@test.ru
			 */
			Email?: string;
			/**
			 * @description Телефон клиента в формате +{Ц}
			 *
			 * @example +79031234567
			 */
			Phone?: string;
			/**
			 * @description Система налогообложения. Перечисление с
			 *     возможными значениями:
			 *     * "osn" - общая СН,
			 *     * "usn_income" - упрощенная СН (доходы),
			 *     * "usn_income_outcome" - упрощенная СН (доходы минус расходы),
			 *     * "envd" - единый налог на вмененный доход;
			 *     * "esn" - единый сельскохозяйственный налог,
			 *     * "patent" - патентная СН.
			 *
			 * @example osn
			 * @enum {string}
			 */
			Taxation?:
				| "osn"
				| "usn_income"
				| "usn_income_outcome"
				| "envd"
				| "esn"
				| "patent";
			/** @description Объект c информацией о видах суммы платежа.
			 *     * Если объект не передан, будет автоматически указана итоговая сумма чека с видом оплаты
			 *     "Безналичный";
			 *     * Если передан объект **receipt.Payments**, то значение в **Electronic** должно быть равно итоговому значению
			 *     Amount в методе `Init`. При этом сумма введенных значений по всем видам оплат, включая Electronic,
			 *     должна быть равна сумме (Amount) всех товаров, переданных в объекте **receipt.Items**
			 *      */
			Payments?: components["schemas"]["Payments"][];
		};
		/** @description **Нотификация о фискацизации**
		 *
		 *     Если используется подключенная онлайн касса, по результату фискализации будет
		 *     отправлена нотификация с фискальными данными
		 *      */
		NotificationFiscalization: {
			/**
			 * @description Идентификатор терминала. Выдается Мерчанту Т‑Кассой
			 *     при заведении терминала
			 *
			 * @example TinkoffBankTest
			 */
			TerminalKey?: string;
			/**
			 * @description Идентификатор заказа в системе Мерчанта
			 *
			 * @example 21050
			 */
			OrderId?: string;
			/**
			 * @description Успешность прохождения запроса (true/false)
			 *
			 * @example true
			 */
			Success?: boolean;
			/**
			 * @description Для нотификации о фискализации значение всегда RECEIPT
			 *
			 * @default RECEIPT
			 */
			Status: string;
			/**
			 * @description Идентификатор платежа в системе Т‑Кассы
			 *
			 * @example 13660
			 */
			PaymentId?: string;
			/**
			 * @description Код ошибки. «0» в случае успеха
			 *
			 * @example 0
			 */
			ErrorCode?: string;
			/** @description Описание ошибки, если она произошла */
			ErrorMessage?: string;
			/**
			 * @description Сумма в копейках
			 *
			 * @example 100000
			 */
			Amount?: number;
			/** @description Номер чека в смене */
			FiscalNumber?: number;
			/** @description Номер смены */
			ShiftNumber?: number;
			/**
			 * Format: datetime
			 * @description Дата и время документа из ФН
			 */
			ReceiptDatetime?: string;
			/** @description Номер ФН */
			FnNumber?: string;
			/** @description Регистрационный номер ККТ */
			EcrRegNumber?: string;
			/** @description Фискальный номер документа */
			FiscalDocumentNumber?: number;
			/** @description Фискальный признак документа */
			FiscalDocumentAttribute?: number;
			/** @description Состав чека */
			Receipt?:
				| components["schemas"]["Receipt_FFD_12-2"]
				| components["schemas"]["Receipt_FFD_105-2"];
			/** @description Признак расчета */
			Type?: string;
			/**
			 * @description Подпись запроса. Формируется по такому же принципу, как и в случае
			 *     запросов в Т‑Кассу
			 *
			 * @example 7241ac8307f349afb7bb9dda760717721bbb45950b97c67289f23d8c69cc7b96
			 */
			Token?: string;
			/** @description Наименование оператора фискальных данных */
			Ofd?: string;
			/** @description URL адрес с копией чека */
			Url?: string;
			/** @description URL адрес с QR кодом для проверки чека в ФНС */
			QrCodeUrl?: string;
			/** @description Место осуществления расчетов */
			CalculationPlace?: string;
			/** @description Имя кассира */
			CashierName?: string;
			/** @description Место нахождения (установки) ККМ */
			SettlePlace?: string;
		};
		/** @description **Нотификация о статусе привязки счета по QR**
		 *
		 *     После привязки счета по QR, магазину отправляется статус привязки и токен.
		 *     Нотификация будет приходить по статусам **ACTIVE** и **INACTIVE**
		 *      */
		NotificationQr: {
			/**
			 * @description Идентификатор терминала, выдается Мерчанту Т‑Кассой
			 *
			 * @example TinkoffBankTest
			 */
			TerminalKey: string;
			/**
			 * Format: uuid
			 * @description Идентификатор запроса на привязку счета
			 *
			 * @example 13021e10-a3ed-4f14-bcd1-823b5ac37390
			 */
			RequestKey: string;
			/**
			 * @description Идентификатор привязки счета,
			 *     назначаемый банком-эмитентом
			 *
			 * @example 70LSS7DN18SJQRS10006DNPKLJL24B05
			 */
			AccountToken?: string;
			/**
			 * @description Идентификатор банка-эмитента клиента, который будет
			 *     совершать оплату по привязаному счету —
			 *     заполнен, если статус ACTIVE
			 *
			 * @example 5555
			 */
			BankMemberId?: string;
			/** @description Наименование банка-эмитента, заполнен если BankMemberId
			 *     передан
			 *      */
			BankMemberName?: string;
			/**
			 * @description Тип нотификации, всегда константа «LINKACCOUNT»
			 * @default LINKACCOUNT
			 */
			NotificationType: string;
			/**
			 * @description Успешность прохождения запроса (true/false)
			 *
			 * @example true
			 */
			Success: boolean;
			/**
			 * @description Код ошибки. «0» в случае успеха
			 *
			 * @example 0
			 */
			ErrorCode: string;
			/** @description Краткое описание ошибки
			 *      */
			Message?: string;
			/**
			 * @description Подпись запроса. Формируется по такому же
			 *     принципу, как и в случае запросов в Т‑Кассу
			 *
			 * @example 871199b37f207f0c4f721a37cdcc71dfcea880b4a4b85e3cf852c5dc1e99a8d6
			 */
			Token: string;
			/**
			 * @description Cтатус привязки
			 * @example ACTIVE
			 */
			Status: string;
		};
		GetDeepLink: {
			/**
			 * @description Идентификатор терминала. <br> Выдается Мерчанту Т‑Кассой при заведении терминала
			 * @example bestforu
			 */
			TerminalKey: string;
			/**
			 * @description Уникальный идентификатор транзакции в системе Банка
			 * @example 2559680770
			 */
			PaymentId: string;
			/**
			 * @description Подпись запроса
			 * @example 871199b37f207f0c4f721a37cdcc71dfcea880b4a4b85e3cf852c5dc1e99a8d6
			 */
			Token: string;
		};
		GetDeepLinkResponse: {
			/**
			 * @description Успешность прохождения запроса (true/false)
			 * @example true
			 * @enum {boolean}
			 */
			Success: true | false;
			/**
			 * @description Код ошибки, «0» - если успешно
			 * @example 0
			 */
			ErrorCode: string;
			/**
			 * @description Сформированный и подписанный JWT-токеном deeplink
			 * @example mirpay://pay.mironline.ru/inapp/eyJhbGciOiJQUzI1NiIsInR5cCI6IkpXVCIsImprdSI6Imh0dHBzOi8vc3AtbnNway5la2Fzc2lyLmNvbS9qd2tzL0IwMDAwMDAwMC1qd2tzLmp«Протокол MIRPAY EACQ с PCI DSS»28zb24iLCJraWQiOiIxMDAwIn0.eyJpYXQiOjE2NjA1NTMwNzksImlzcyI6IjAwMDAwMDAwIiwib3JkZXJJZCI6IjEyMzQ1NiIsInN1bSI6MTAwMDAsImN1ciI6NjQzLCJtZWRpYSI6IkRMIiwicnVybCI6Imh0dHBzOi8vbWVyY2hhbnQvYXBpL3YxL2luYXBwL21lcmNoYW50cy8wMDAwMDAwMC9vcmRlcnMvMTIzNDU2In0.rk0LjOtx3RR9hboAiVQopZvKzIQpu0SGg2wlt6a1LJN1gQ7NEqcXY0NXfjmhqbPdv8BnDonhXMWLoi9GK4wT8-P_TOfRnqz5JfA4crvtVaD6yvmfkmdFMsFjTDDJfcsaMlqblVw2u5De3SU9oCNKWaWLUUg7i6gRtTCFdvPc1XDlB7WUd_doHLVEV4s5kP1jmArXMBxo1EpJk3pZ-KHmxFeKLjf47NQuNzRv0wZKTgkHk252lXX9QBCE_uTBvV477YZ6FTqAXh9vP1zGiSG6Elel3EKMVxUNkMAhHIACxwmOGRpGsPv0WFlw1T0y44Q7paV_t6st6vlHO3RXYfbA
			 */
			Deeplink?: string;
			/** @description Краткое описание ошибки */
			Message?: string;
			/** @description Подробное описание ошибки */
			Details?: string;
		};
		GetTerminalPayMethods: {
			/**
			 * @description Идентификатор терминала. <br> Выдается Мерчанту Т‑Кассой при заведении терминала
			 * @example TinkoffBankTest
			 */
			TerminalKey: string;
			/**
			 * @description Тип подключения:
			 *     - API;
			 *     - SDK.
			 *
			 * @example API
			 */
			Paysource: string;
		};
		/** @description Перечень доступных методов оплаты */
		Paymethod: {
			/**
			 * @description Доступные методы оплаты:
			 *     * TinkoffPay,
			 *     * YandexPay,
			 *     * ApplePay,
			 *     * GooglePay,
			 *     * SBP,
			 *     * MirPay.
			 *
			 * @example TinkoffPay
			 */
			PayMethod: string;
			/**
			 * @description Перечень параметров подключения в формате ключзначение
			 * @example "Version":2.0,
			 *     "CustomButton":{
			 *       "СustomButtonType":"percentButton",
			 *       "Percent":5,}
			 *
			 */
			Params?: Record<string, never>;
		};
		GetTerminalPayMethodsResponse: {
			/**
			 * @description Успешность прохождения запроса (true/false)
			 * @example true
			 * @enum {boolean}
			 */
			Success: true | false;
			/**
			 * @description Код ошибки, «0» - если успешно
			 * @example 0
			 */
			ErrorCode: string;
			/** @description Краткое описание ошибки */
			Message?: string;
			/** @description Подробное описание ошибки */
			Details?: string;
			/** @description Характеристики терминала */
			TerminalInfo: Record<string, never>;
			/** @description Перечень доступных методов оплаты */
			"TerminalInfo.Paymethods"?: components["schemas"]["Paymethod"][];
			/**
			 * @description Признак возможности сохранения карт
			 * @example false
			 * @enum {boolean}
			 */
			"TerminalInfo.AddCardScheme": true | false;
			/**
			 * @description Признак необходимости подписания токеном
			 * @example true
			 * @enum {boolean}
			 */
			"TerminalInfo.TokenRequired": true | false;
			/**
			 * @description Признак необходимости подписания токеном запроса `Init`
			 * @example true
			 * @enum {boolean}
			 */
			"TerminalInfo.InitTokenRequired": true | false;
		};
		/** на URL */
		by_url: {
			/**
			 * @description Идентификатор терминала, выдается Мерчанту Т‑Кассой
			 * @example TinkoffBankTest
			 */
			TerminalKey: string;
			/**
			 * @description URL сервиса получения справок
			 * @example https://www.tinkoff.ru
			 */
			CallbackUrl: string;
			/**
			 * @description Json-массив, содержащий в себе перечень paymentID (уникальных идентификаторов в системе Т‑Кассы) c типом Number
			 * @example [
			 *       1201206437,
			 *       1201206442
			 *     ]
			 */
			PaymentIdList: number[];
			/**
			 * @description Подпись запроса
			 * @example f2fdd7fec8225872590e1558b7ea258c75df8f300d808006c41ab540dd7514d9
			 */
			Token: string;
		};
		/** на E-mail */
		by_email: {
			/**
			 * @description Идентификатор терминала, выдается Мерчанту Т‑Кассой
			 * @example TinkoffBankTest
			 */
			TerminalKey: string;
			/**
			 * @description Json-массив, содержащий в себе перечень paymentID (уникальных идентификаторов в системе Т‑Кассы) c типом Number
			 * @example [
			 *       1201206437,
			 *       1201206442
			 *     ]
			 */
			PaymentIdList: number[];
			/**
			 * @description Json-массив, содержащий перечень E-mail с типом String
			 * @example [
			 *       "test1@tinkoff.ru",
			 *       "test2@tinkoff.ru"
			 *     ]
			 */
			EmailList: string[];
			/**
			 * @description Подпись запроса
			 * @example f2fdd7fec8225872590e1558b7ea258c75df8f300d808006c41ab540dd7514d9
			 */
			Token: string;
		};
		/** @description Json-массив с объектами, содержащими информацию по запросу */
		PaymentIdListForGCO: {
			/**
			 * @description Успешность прохождения запроса (true/false)
			 * @example true
			 */
			Success: boolean;
			/**
			 * @description Код ошибки. «0» в случае успеха
			 * @example 0
			 */
			ErrorCode: string;
			/**
			 * @description Сервисное сообщение
			 * @example Запрос на отправку документа принят
			 */
			Message: string;
			/**
			 * @description Идентификатор операции
			 * @example 1201206442
			 */
			PaymentId: string;
		};
		/** Ответ на запрос (URL) */
		response_by_url: {
			/**
			 * @description Успешность прохождения запроса (true/false)
			 * @example true
			 */
			Success: boolean;
			/**
			 * @description Код ошибки. «0» в случае успеха
			 * @example 0
			 */
			ErrorCode: string;
			/**
			 * @description Краткое описание ошибки
			 * @example OK
			 */
			Message?: string;
			PaymentIdList: components["schemas"]["PaymentIdListForGCO"][];
		};
		/** Ответ на запрос (e-mail) */
		response_by_email: {
			/**
			 * @description Успешность прохождения запроса (true/false)
			 * @example true
			 */
			Success: boolean;
			/**
			 * @description Код ошибки. «0» в случае успеха
			 * @example 0
			 */
			ErrorCode: string;
			/**
			 * @description Краткое описание ошибки
			 * @example OK
			 */
			Message?: string;
			PaymentIdList: components["schemas"]["PaymentIdListForGCO"][];
		};
	};
}

/**
 * Сгенерированные из OpenAPI типы для `operations`
 */
export interface operations {
	Init: {
		requestBody: {
			content: {
				"application/json":
					| components["schemas"]["Init_FULL"]
					| components["schemas"]["Init_SDK"];
			};
		};
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Response"];
				};
			};
		};
	};
	InitPayments: {
		requestBody: {
			content: {
				"application/json": components["schemas"]["InitPayments"];
			};
		};
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["InitPaymentsResponse"];
				};
			};
		};
	};
	Check3dsVersion: {
		requestBody: {
			content: {
				"application/json": {
					/**
					 * @description Идентификатор платежа в системе Т‑Кассы
					 *
					 * @example 13660
					 */
					PaymentId: string;
					/**
					 * @description Идентификатор терминала, выдается Мерчанту Т‑Кассой
					 *
					 * @example testRegressBank
					 */
					TerminalKey: string;
					/**
					 * @description Зашифрованные данные карты в формате:
					 *     ```
					 *     PAN=4300000000000777;ExpDate=0519;CardHolder=IVAN PETROV;CVV=111
					 *     ```
					 *     type: string
					 *
					 * @example U5jDbwqOVx+2vDApxe/rfACMt+rfWXzPdJ8ZXxNFVIiZaLZrOW72bGe9cKZdIDnekW0nqm88YxRD↵jyfa5Ru0kY5cQV alU+juS1u1zpamSDtaGFeb8sRZfhj72yGw+io+qHGSBeorcfgoKStyKGuBPWfG↵d0PLHuyBE6QgZyIAM1XfdmNlV0UAxOnkTGDsskL pIt3AWhw2e8KOar0vwbgCTDjznDB1/DLgOW01↵Aj/bXyLJoG1BkOrPBm9JURs+f+uyFae0hkRicNKNgXoN5pJTSQxOEauOi6ylsVJ B3WK5MNYXtj6x↵GlxcmTk/LD9kvHcjTeojcAlDzRZ87GdWeY8wgg==
					 */
					CardData: unknown;
					/**
					 * @description Подпись запроса
					 *
					 * @example 30797e66108934dfa3d841b856fdad227c6b9c46d6a39296e02dc800d86d181e
					 */
					Token: string;
				};
			};
		};
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * @description Версия протокола 3DS.
						 *     Пример:
						 *     * "1.0.0” — первая версия,
						 *     * “2.1.0” — вторая версия.
						 *
						 * @example 2.1.0
						 */
						Version: string;
						/**
						 * @description Уникальный идентификатор транзакции,
						 *     генерируемый 3DS-Server, обязательный
						 *     параметр для 3DS второй версии
						 *
						 * @example 17d3791b-5cfa-4318-bc23-3d949e8c4b7e
						 */
						TdsServerTransID?: string;
						/**
						 * Format: uri
						 * @description Дополнительный параметр для 3DS второй
						 *     версии, который позволяет пройти этап по
						 *     сбору данных браузера ACS-ом
						 *
						 * @example https://acs.vendorcert.mirconnect.ru/ds/6300
						 */
						ThreeDSMethodURL?: string;
						/**
						 * @description Платежная система карты
						 *
						 * @example mir
						 */
						PaymentSystem: string;
						/**
						 * @description Успешность прохождения запроса (true/false)
						 *
						 * @example true
						 */
						Success: boolean;
						/**
						 * @description Код ошибки. «0» в случае успеха
						 *
						 * @example 0
						 */
						ErrorCode: string;
						/**
						 * @description Краткое описание ошибки
						 *
						 * @example None
						 */
						Message?: string;
						/**
						 * @description Подробное описание ошибки
						 *
						 * @example None
						 */
						Details?: string;
					};
				};
			};
		};
	};
	FinishAuthorize: {
		requestBody: {
			content: {
				"application/json":
					| components["schemas"]["FinishAuthorize_FULL"]
					| components["schemas"]["FinishAuthorize_SDK"];
			};
		};
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["Without3DS"]
						| components["schemas"]["With3DS"]
						| components["schemas"]["With3DSv2APP"]
						| components["schemas"]["With3DSv2BRW"];
				};
			};
		};
	};
	Confirm: {
		requestBody: {
			content: {
				"application/json": components["schemas"]["Confirm"];
			};
		};
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Confirm-2"];
				};
			};
		};
	};
	Cancel: {
		requestBody: {
			content: {
				"application/json": components["schemas"]["Cancel"];
			};
		};
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Cancel-2"];
				};
			};
		};
	};
	ChargePCI: {
		requestBody: {
			content: {
				"application/json":
					| components["schemas"]["Charge_FULL"]
					| components["schemas"]["Charge_SDK"];
			};
		};
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * @description Идентификатор терминала. Выдается Мерчанту Т‑Кассой
						 *     при заведении терминала
						 *
						 * @example TinkoffBankTest
						 */
						TerminalKey: string;
						/**
						 * @description Сумма в копейках
						 *
						 * @example 100000
						 */
						Amount: number;
						/**
						 * @description Идентификатор заказа в системе Мерчанта
						 *
						 * @example 21050
						 */
						OrderId: string;
						/**
						 * @description Успешность прохождения запроса (true/false)
						 *
						 * @example true
						 */
						Success: boolean;
						/**
						 * @description Статус платежа
						 *
						 *     Получает в ответе 1 из 2 статусов:
						 *     * CONFIRMED — если платеж выполнен,
						 *     * REJECTED — если платеж не выполнен.
						 *
						 * @example NEW
						 */
						Status: string;
						/**
						 * @description Идентификатор платежа в системе Т‑Кассы
						 *
						 * @example 13660
						 */
						PaymentId: string;
						/**
						 * @description Код ошибки. «0» в случае успеха
						 *
						 * @example 0
						 */
						ErrorCode: string;
						/** @description Краткое описание ошибки
						 *      */
						Message?: string;
						/** @description Подробное описание ошибки
						 *      */
						Details?: string;
					};
				};
			};
		};
	};
	GetState: {
		requestBody: {
			content: {
				"application/json":
					| components["schemas"]["GetState_FULL"]
					| components["schemas"]["GetState_SDK"];
			};
		};
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * @description Идентификатор терминала. Выдается Мерчанту Т‑Кассой
						 *     при заведении терминала
						 *
						 * @example TinkoffBankTest
						 */
						TerminalKey: string;
						/**
						 * @description Сумма в копейках
						 *
						 * @example 100000
						 */
						Amount: number;
						/**
						 * @description Идентификатор заказа в системе Мерчанта
						 *
						 * @example 21050
						 */
						OrderId: string;
						/**
						 * @description Успешность прохождения запроса (true/false)
						 *
						 * @example true
						 */
						Success: boolean;
						/**
						 * @description Статус платежа. Подробнее см. в разделе [Статусная модель платежа](#tag/Scenarii-oplaty-po-karte/Statusnaya-model-platezha)
						 *
						 * @example NEW
						 */
						Status: string;
						/**
						 * @description Идентификатор платежа в системе Т‑Кассы
						 *
						 * @example 13660
						 */
						PaymentId: string;
						/**
						 * @description Код ошибки. «0» в случае успеха
						 *
						 * @example 0
						 */
						ErrorCode: string;
						/**
						 * @description Краткое описание ошибки
						 *
						 * @example OK
						 */
						Message?: string;
						/**
						 * @description Подробное описание ошибки
						 *
						 * @example 0
						 */
						Details?: string;
						/** @description Информация по способу оплаты/деталям для платежей в рассрочку
						 *      */
						Params?: components["schemas"]["Items_Params"][];
					};
				};
			};
		};
	};
	AddCustomer: {
		requestBody: {
			content: {
				"application/json": components["schemas"]["AddCustomer"];
			};
		};
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["AddCustomerResponse"];
				};
			};
		};
	};
	GetCustomer: {
		requestBody: {
			content: {
				"application/json": components["schemas"]["GetOrRemoveCustomer"];
			};
		};
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetCustomerResponse"];
				};
			};
		};
	};
	RemoveCustomer: {
		requestBody: {
			content: {
				"application/json": components["schemas"]["GetOrRemoveCustomer"];
			};
		};
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RemoveCustomerResponse"];
				};
			};
		};
	};
	AddCard: {
		requestBody: {
			content: {
				"application/json":
					| components["schemas"]["AddCard_FULL"]
					| components["schemas"]["AddCard_SDK"];
			};
		};
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["AddCardResponse_FULL"]
						| components["schemas"]["AddCardResponse_SDK"];
				};
			};
		};
	};
	AttachCard: {
		requestBody: {
			content: {
				"application/json": components["schemas"]["AttachCard"];
			};
		};
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["AttachCardResponse"];
				};
			};
		};
	};
	GetAddCardState: {
		requestBody: {
			content: {
				"application/json": components["schemas"]["GetAddCardState"];
			};
		};
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetAddCardStateResponse"];
				};
			};
		};
	};
	GetCardList: {
		requestBody: {
			content: {
				"application/json":
					| components["schemas"]["GetCardList_FULL"]
					| components["schemas"]["GetCardList_SDK"];
			};
		};
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * @description Идентификатор карты в системе Т‑Кассы
						 *
						 * @example 881900
						 */
						CardId: string;
						/**
						 * @description Номер карты
						 *
						 * @example 518223******0036
						 */
						Pan: string;
						/**
						 * @description Статус карты:
						 *     * A — активная,
						 *     * D — удаленная.
						 *
						 * @example D
						 * @enum {string}
						 */
						Status: "A" | "D";
						/**
						 * @description Идентификатор рекуррентного платежа
						 *
						 * @example 6155312073
						 */
						RebillId?: string;
						/**
						 * @description Тип карты:
						 *     * карта списания (0),
						 *     * карта пополнения (1),
						 *     * карта пополнения и списания (2).
						 *
						 * @example 0
						 * @enum {number}
						 */
						CardType: 0 | 1 | 2;
						/**
						 * @description Срок действия карты
						 *
						 * @example 1122
						 */
						ExpDate?: string;
					}[];
				};
			};
		};
	};
	RemoveCard: {
		requestBody: {
			content: {
				"application/json": components["schemas"]["RemoveCard"];
			};
		};
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RemoveCardResponse"];
				};
			};
		};
	};
	GetQr: {
		requestBody: {
			content: {
				"application/json": components["schemas"]["GetQr"];
			};
		};
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["QrResponse_FULL"]
						| components["schemas"]["QrResponse_SDK"];
				};
			};
		};
	};
	SubmitRandomAmount: {
		requestBody: {
			content: {
				"application/json": {
					/**
					 * @description Идентификатор терминала, выдается Мерчанту Т‑Кассой
					 *
					 * @example testRegressBank
					 */
					TerminalKey: string;
					/**
					 * @description Идентификатор запроса на привязку карты
					 *
					 * @example 13021e10-a3ed-4f14-bcd1-823b5ac37390
					 */
					RequestKey: string;
					/**
					 * @description Сумма в копейках
					 *
					 * @example 100000
					 */
					Amount: number;
					/**
					 * @description Подпись запроса
					 *
					 * @example 30797e66108934dfa3d841b856fdad227c6b9c46d6a39296e02dc800d86d181e
					 */
					Token: string;
				};
			};
		};
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * @description Идентификатор терминала. Выдается Мерчанту Т‑Кассой
						 *     при заведении терминала
						 *
						 * @example TinkoffBankTest
						 */
						TerminalKey: string;
						/**
						 * @description Идентификатор клиента в системе Мерчанта
						 *
						 * @example testCustomer1234
						 */
						CustomerKey: string;
						/**
						 * @description Идентификатор запроса на привязку карты
						 *
						 * @example 13021e10-a3ed-4f14-bcd1-823b5ac37390
						 */
						RequestKey: string;
						/** @description Идентификатор рекуррентного платежа
						 *      */
						RebillId?: string;
						/**
						 * @description Идентификатор карты в системе Т‑Кассы
						 *
						 * @example 156516516
						 */
						CardId: string;
						/**
						 * @description Успешность прохождения запроса (true/false)
						 *
						 * @example true
						 */
						Success: boolean;
						/**
						 * @description Код ошибки. «0» в случае успеха
						 *
						 * @example 0
						 */
						ErrorCode: string;
						/** @description Краткое описание ошибки
						 *      */
						Message?: string;
						/** @description Подробное описание ошибки
						 *      */
						Details?: string;
						/**
						 * @description Статус платежа
						 *
						 * @example NEW
						 */
						Status?: string;
					};
				};
			};
		};
	};
	Submit3DSAuthorization: {
		requestBody: {
			content: {
				"application/x-www-form-urlencoded": {
					/**
					 * @description Уникальный идентификатор транзакции в системе
					 *     Т‑Кассы (возвращается в ответе от ACS)
					 *
					 * @example 2561504
					 */
					MD: string;
					/**
					 * @description Шифрованная строка, содержащая результаты 3-D Secure аутентификации (возвращается в ответе от ACS)
					 *
					 * @example eJxVUttygjAU/BWG1w4mXKXOMY5WOrVTrOOtl7cAqeJI1AAO+vVNFKrlaffkZM9mD9Crsq12ZCJPd7yrmy2sa4zHuyTlq66+mD8bvt4jMF8LxoYzFpeCEQhZntMV09JE3vC8Hx9j27A8LzEcN7aNCPu24VIrihKXetiPdAKT/pQdCNSDiJzTsgA1VCqKeE15QYDGh8FoTBy73fZtQDWFjInRkFi4+Uz82JbH1zJwmjEyHcwAXRDEu5IX4kQ8R/Y0BEqxJeui2HcQOlGesKolSkCqCuhmYFIqlEuVKk3IDL8uPwI3jDaBGZ4XeLxZVeFw5I7nX11AqgMSWjDpzPSxb/ma6XRct4Pl4y51oJkar5zLx1wx7NWI/t3BfQFkxkKuoHHfMGDVfseZugLoDwO6+X16UfHFhUyk/32OMH3vZ5+nYBu/2d4xcMTDsn04j19VqJcmpZjKYKT3q6QigJQMqveF6lVL9O8X+AWMIbbt
					 */
					PaRes: string;
					/**
					 * @description Уникальный идентификатор транзакции в системе Т‑Кассы
					 *
					 * @example 10063
					 */
					PaymentId?: string;
					/**
					 * @description Идентификатор терминала, выдается Мерчанту Т‑Кассой
					 *
					 * @example testRegressBank
					 */
					TerminalKey: string;
					/**
					 * @description Подпись запроса
					 *
					 * @example 30797e66108934dfa3d841b856fdad227c6b9c46d6a39296e02dc800d86d181e
					 */
					Token?: string;
				};
			};
		};
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * @description Идентификатор терминала, выдается Мерчанту Т‑Кассой
						 *
						 * @example TinkoffBankTest
						 */
						TerminalKey: string;
						/**
						 * @description Номер заказа в системе Мерчанта
						 *
						 * @example 21050
						 */
						OrderId: string;
						/**
						 * @description Успешность прохождения запроса (true/false)
						 *
						 * @example true
						 */
						Success: boolean;
						/**
						 * @description Статус транзакции
						 *     - CONFIRMED при успешном сценарии и одностадийном проведении платежа;
						 *     - AUTHORIZED при успешном сценарии и двухстадийном проведении платежа;
						 *     - REJECTED при неуспешном.
						 *
						 * @example CONFIRMED
						 */
						Status: string;
						/**
						 * @description Уникальный идентификатор транзакции в системе Т‑Кассы
						 *
						 * @example 10063
						 */
						PaymentId: string;
						/**
						 * @description Код ошибки. «0» в случае успеха
						 *
						 * @example 0
						 */
						ErrorCode: string;
						/** @description Краткое описание ошибки
						 *      */
						Message?: string;
						/** @description Подробное описание ошибки
						 *      */
						Details?: string;
					};
				};
			};
		};
	};
	Submit3DSAuthorizationV2: {
		requestBody: {
			content: {
				"application/x-www-form-urlencoded": {
					/**
					 * @description Уникальный идентификатор транзакции в системе Т‑Кассы
					 *
					 * @example 10063
					 */
					PaymentId: string;
					/**
					 * @description Идентификатор терминала, выдается Мерчанту Т‑Кассой
					 *
					 * @example testRegressBank
					 */
					TerminalKey: string;
					/**
					 * @description Подпись запроса
					 *
					 * @example 30797e66108934dfa3d841b856fdad227c6b9c46d6a39296e02dc800d86d181e
					 */
					Token: string;
				};
			};
		};
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * @description Номер заказа в системе Мерчанта
						 *
						 * @example 21050
						 */
						OrderId: string;
						/**
						 * @description Идентификатор терминала, выдается Мерчанту Т‑Кассой
						 *
						 * @example TinkoffBankTest
						 */
						TerminalKey: string;
						/**
						 * @description Статус транзакции
						 *
						 * @example CONFIRMED
						 */
						Status: string;
						/**
						 * @description Уникальный идентификатор транзакции в системе Т‑Кассы
						 *
						 * @example 10063
						 */
						PaymentId: string;
						/**
						 * @description Успешность прохождения запроса (true/false)
						 *
						 * @example true
						 */
						Success: boolean;
						/**
						 * @description Код ошибки. «0» в случае успеха
						 *
						 * @example 0
						 */
						ErrorCode: string;
						/** @description Краткое описание ошибки
						 *      */
						Message?: string;
						/** @description Подробное описание ошибки
						 *      */
						Details?: string;
					};
				};
			};
		};
	};
	Status: {
		parameters: {
			path: {
				/** @description Платежный ключ, выдается Мерчанту при заведении
				 *     терминала
				 *      */
				TerminalKey: string;
			};
		};

		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/** @description Параметры ответа
						 *      */
						Params: {
							/**
							 * @description Наличие возможности проведения оплаты
							 *     T‑Pay по API, SDK
							 *
							 * @example true
							 */
							Allowed: boolean;
							/**
							 * @description Версия T‑Pay, доступная на терминале:
							 *     * 1.0 (e-invoice),
							 *     * 2.0 (T‑Pay).
							 *
							 * @example 1.0
							 */
							Version?: string;
						};
						/**
						 * @description Успешность прохождения запроса (true/false)
						 *
						 * @example true
						 */
						Success: boolean;
						/**
						 * @description Код ошибки. «0» в случае успеха
						 *
						 * @example 0
						 */
						ErrorCode: string;
						/** @description Краткое описание ошибки
						 *      */
						Message?: string;
						/** @description Подробное описание ошибки
						 *      */
						Details?: string;
					};
				};
			};
		};
	};
	Link: {
		parameters: {
			path: {
				/** @description Идентификатор платежа в системе Т‑Кассы
				 *      */
				paymentId: number;
				/** @description Версия T‑Pay, доступная на терминале:
				 *     * 2.0 (T‑Pay)
				 *      */
				version: string;
			};
		};

		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/** @description Параметры ответа
						 *      */
						Params: {
							/**
							 * Format: uri
							 * @description Link для перехода в приложение MB на мобильных
							 *     устройствах
							 *
							 * @example tinkoffbank://Main/EInvoicing?billId=5000015507&providerId=e-invoicing
							 */
							RedirectUrl: string;
							/**
							 * Format: uri
							 * @description URL для получения QR
							 *
							 */
							WebQR?: string;
						};
						/**
						 * @description Успешность прохождения запроса (true/false)
						 *
						 * @example true
						 */
						Success: boolean;
						/**
						 * @description Код ошибки. «0» в случае успеха
						 *
						 * @example 0
						 */
						ErrorCode: string;
						/** @description Краткое описание ошибки
						 *      */
						Message?: string;
						/** @description Подробное описание ошибки
						 *      */
						Details?: string;
					};
				};
			};
		};
	};
	QR: {
		parameters: {
			path: {
				/** @description Уникальный идентификатор транзакции в
				 *     системе Т‑Кассы
				 *      */
				paymentId: number;
			};
		};

		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"image/svg": unknown;
				};
			};
		};
	};
	SberPayQR: {
		parameters: {
			path: {
				/** @description Уникальный идентификатор транзакции в
				 *     системе Т‑Кассы
				 *      */
				paymentId: string;
			};
		};

		responses: {
			/** @description SVG QR, размером 124*124 */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"image/svg": unknown;
				};
			};
		};
	};
	SberPaylink: {
		parameters: {
			path: {
				/** @description Уникальный идентификатор транзакции в
				 *     системе Т‑Кассы
				 *      */
				paymentId: number;
			};
		};

		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/** @description Параметры ответа
						 *      */
						Params: {
							/**
							 * Format: uri
							 * @description URL для перехода
							 *
							 * @example tinkoffbank://Main/EInvoicing?billId=5000015507&providerId=e-invoicing
							 */
							RedirectUrl: string;
						};
						/**
						 * @description Успешность прохождения запроса (true/false)
						 *
						 * @example true
						 */
						Success: boolean;
						/**
						 * @description Код ошибки. «0» в случае успеха
						 *
						 * @example 0
						 */
						ErrorCode: string;
						/** @description Краткое описание ошибки
						 *      */
						Message?: string;
						/** @description Подробное описание ошибки
						 *      */
						Details?: string;
					};
				};
			};
		};
	};
	"T-PayEvent": {
		requestBody: {
			content: {
				"application/json": components["schemas"]["T-PayEvent"];
			};
		};
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * @description Успешность прохождения запроса (true/false)
						 * @example true
						 * @enum {boolean}
						 */
						Success: true | false;
						/**
						 * @description Код ошибки. «0» — если успешно
						 * @example 0
						 */
						ErrorCode: string;
						/** @description Краткое описание ошибки */
						Message?: string;
						/** @description Подробное описание ошибки */
						Details?: string;
					};
				};
			};
		};
	};
	QrMembersList: {
		requestBody: {
			content: {
				"application/json": {
					/**
					 * @description Идентификатор терминала, выдается Мерчанту Т‑Кассой
					 *
					 * @example TinkoffBankTest
					 */
					TerminalKey: string;
					/**
					 * @description Уникальный идентификатор транзакции в системе
					 *     Т‑Кассы
					 *
					 * @example 10063
					 */
					PaymentId: string;
					/**
					 * @description Подпись запроса
					 * @example 871199b37f207f0c4f721a37cdcc71dfcea880b4a4b85e3cf852c5dc1e99a8d6
					 */
					Token: string;
				};
			};
		};
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/** @description Массив списка участников. Возвращается
						 *     только если возврат возможен
						 *      */
						Members?: components["schemas"]["Member"][];
						/**
						 * @description Идентификатор заказа в системе Мерчанта
						 *
						 * @example 21050
						 */
						OrderId: string;
						/**
						 * @description Успешность прохождения запроса (true/false)
						 *
						 * @example true
						 */
						Success: boolean;
						/**
						 * @description Код ошибки. «0» в случае успеха
						 *
						 * @example 0
						 */
						ErrorCode: string;
						/**
						 * @description Краткое описание ошибки
						 *
						 * @example OK
						 */
						Message?: string;
					};
				};
			};
		};
	};
	AddAccountQr: {
		requestBody: {
			content: {
				"application/json": components["schemas"]["AddAccountQr"];
			};
		};
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["AddAccountQrResponse"];
				};
			};
		};
	};
	GetAddAccountQrState: {
		requestBody?: {
			content: {
				"application/json": components["schemas"]["GetAddAccountQrState"];
			};
		};
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetAddAccountQrStateResponse"];
				};
			};
		};
	};
	GetAccountQrList: {
		requestBody?: {
			content: {
				"application/json": components["schemas"]["GetAccountQrList"];
			};
		};
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetAccountQrListResponse"];
				};
			};
		};
	};
	ChargeQr: {
		requestBody: {
			content: {
				"application/json": components["schemas"]["ChargeQr"];
			};
		};
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ChargeQrResponse"];
				};
			};
		};
	};
	SbpPayTest: {
		requestBody: {
			content: {
				"application/json": components["schemas"]["SbpPayTest"];
			};
		};
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["SbpPayTestResponse"];
				};
			};
		};
	};
	GetQrState: {
		requestBody: {
			content: {
				"application/json": {
					/**
					 * @description Идентификатор терминала, выдается Мерчанту Т‑Кассой
					 *
					 * @example TinkoffBankTest
					 */
					TerminalKey: string;
					/**
					 * @description Уникальный идентификатор транзакции в системе
					 *     Т‑Кассы, полученный в ответе на вызов метода Init
					 *
					 * @example 700031849
					 */
					PaymentId: string;
					/**
					 * @description Подпись запроса
					 *
					 * @example l43kb4hyi6lknb23bv4gdfskjn238fsllsdf8
					 */
					Token: string;
				};
			};
		};
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["GetQRStateResponse_FULL"]
						| components["schemas"]["GetQRStateResponse_SDK"];
				};
			};
		};
	};
	CheckOrder: {
		requestBody: {
			content: {
				"application/json": components["schemas"]["CheckOrder"];
			};
		};
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CheckOrder-2"];
				};
			};
		};
	};
	SendClosingReceipt: {
		requestBody: {
			content: {
				"application/json": components["schemas"]["SendClosingReceipt"];
			};
		};
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["SendClosingReceipt-2"];
				};
			};
		};
	};
	GetDeepLink: {
		requestBody: {
			content: {
				"application/json": components["schemas"]["GetDeepLink"];
			};
		};
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetDeepLinkResponse"];
				};
			};
		};
	};
	GetTerminalPayMethods: {
		requestBody: {
			content: {
				"application/json": components["schemas"]["GetTerminalPayMethods"];
			};
		};
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetTerminalPayMethodsResponse"];
				};
			};
		};
	};
	GetConfirmOperation: {
		requestBody?: {
			content: {
				"application/json":
					| components["schemas"]["by_url"]
					| components["schemas"]["by_email"];
			};
		};
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["response_by_url"]
						| components["schemas"]["response_by_email"];
				};
			};
		};
	};
	Notification: {
		requestBody?: {
			content: {
				"application/json":
					| components["schemas"]["NotificationPayment"]
					| components["schemas"]["NotificationAddCard"]
					| components["schemas"]["NotificationFiscalization"]
					| components["schemas"]["NotificationQr"];
			};
		};
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
			};
		};
	};
}
